{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"insiders","text":"<p>Manage your Insiders projects.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install insiders\n</code></pre> <p>With <code>uv</code>:</p> <pre><code>uv tool install insiders\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>The <code>insiders</code> tool provides several commands that will help you manage projects based on a sponsorware strategy.</p> <ul> <li><code>insiders backlog</code>: Print a backlog of issues, ordered using your own defined criteria</li> <li><code>insiders index</code>: Serve a PyPI-like index locally, and upload private Insiders packages to it.</li> <li><code>insiders project</code>: Bootstrap public/insiders project pairs on GitHub.</li> <li><code>insiders sponsors</code>: Manage your sponsors (grant/revoke access to private team, etc.).</li> </ul> <p>Run <code>insiders -h</code> to see where the configuration file is found. Example configuration:</p> <pre><code># --------------------------------------------------------------------------- #\n# Backlog configuration.                                                      #\n# --------------------------------------------------------------------------- #\n# The `backlog` command prints a list of issues from GitHub repositories.\n# It is used to keep track of what needs to be done, and to prioritize tasks.\n[backlog]\n\n# GitHub namespaces (user accounts / organizations) from which to fetch issues.\nnamespaces = [\"pawamoy\", \"mkdocstrings\"]\n\n# How many issues to display when showing the backlog.\nlimit = 30\n\n# Sorting criteria, in order of importance.\n# TODO: Document syntax and available options.\nsort = [\n    \"label('bug')\",\n    \"label('unconfirmed')\",\n    \"label('docs')\",\n    \"label('refactor')\",\n    \"min_sponsorships(50)\",\n    \"min_upvotes(2)\",\n    \"label('insiders')\",\n    \"repository('mkdocstrings/*')\",\n    \"created\",\n]\n\n# A shell command to get your GitHub token.\ngithub-token-command = \"command to echo token\"\n\n# A map of labels to emojis, for shorter display in the backlog.\n[backlog.issue-labels]\nbug = \"\ud83d\udc1e\"\ndocs = \"\ud83d\udcd8\"\nfeature = \"\u2728\"\ninsiders = \"\ud83d\udd12\"\nunconfirmed = \"\u2754\"\n\n# --------------------------------------------------------------------------- #\n# Index configuration.                                                        #\n# --------------------------------------------------------------------------- #\n# The `index` command lets you serve a PyPI-like index locally,\n# and upload Insiders versions of projects to it,\n# so that you can install them transparently as dependencies.\n# You can configure a remote index too, instead of a locally-served one.\n[index]\n\n# The URL of the index, local or remote.\nurl = \"http://localhost:31411\"\n\n# Whether to start the index server in the background (when serving locally).\nstart-in-background = true\n\n# The path to the log file of the index server (when serving locally).\nlog-path = \"/tmp/insiders-index.log\"\n\n# --------------------------------------------------------------------------- #\n# Projects configuration.                                                     #\n# --------------------------------------------------------------------------- #\n# The `project` command lets you create public and private projects on GitHub.\n# It supports Copier templates to generate the initial project structure.\n# It can also register projects on PyPI, and run post-creation commands.\n# Created projects will be cloned in the specified directories.\n[project]\n\n# If your Insiders organization is named \"your-username-insiders\",\n# you can specify your GitHub username instead of both the public\n# and insiders namespaces in which projects will be created.\ngithub-username = \"pawamoy\"\n\n# Explicitly specify the public and insiders namespaces.\nnamespace = \"pawamoy\"\ninsiders-namespace = \"pawamoy-insiders\"\n\n# Where to clone the created projects (Git repositories).\ndirectory = \"~/data/dev\"\ninsiders-directory = \"~/data/dev/insiders\"\n\n# Whether to register projects on PyPI.\nregister-on-pypi = false\npypi-username = \"pawamoy\"\n\n# Post-creation commands to run after creating a project.\n# The command only runs in the public project, not the private one.\npost-creation-command = [\n    \"python\",\n    \"scripts/make\",\n    \"setup\",\n    \"changelog\",\n    \"release\",\n    \"version=0.1.0\",\n]\n\n# A Copier template to generate new projects from.\ncopier-template = \"gh:pawamoy/copier-uv\"\n\n# A mapping of template questions to answers.\n# TODO: Document syntax and available options.\n[project.copier-template-answers]\nproject_name = \"{public_name}\"\nproject_description = \"{description}\"\nauthor_username = \"pawamoy\"\nrepository_namespace = \"{public_namespace}\"\nrepository_name = \"{public_name}\"\ninsiders = true\ninsiders_repository_name = \"{insiders_name}\"\n\n# --------------------------------------------------------------------------- #\n# Sponsors configuration.                                                     #\n# --------------------------------------------------------------------------- #\n# The `sponsors` command lets you list sponsors from different platforms,\n# show detailed information about a user,\n# and synchronize your sponsors' access to a GitHub team,\n# where your private projects are made available.\n[sponsors]\n\n# Your GitHub account receiving sponsorships.\ngithub-sponsored-account = \"pawamoy\"\n\n# A shell command to get your GitHub token.\ngithub-token-command = \"command to echo token\"\n\n# Your Polar account receiving sponsorships.\npolar-sponsored-account = \"pawamoy\"\n\n# A shell command to get your Polar token.\npolar-token-command = \"command to echo token\"\n\n# The minimum amount a sponsor must pledge to be considered an insider,\n# granting them access to your private projects.\nminimum-amount = 10\n\n# The GitHub team to which insiders are invited.\ninsiders-team = \"pawamoy-insiders/insiders\"\n\n# A list of users to always include into the insiders team.\ninclude-users = [\n    \"pawamoy\",  # Myself.\n]\n\n# A list of users to always exclude from the insiders team.\nexclude-users = []\n\n# A map of GitHub sponsors to their beneficiaries.\n# Beneficiaries are users/organizations who get voting power\n# and are optionally granted access to your Insiders team.\n# TODO: Document supported values.\n[sponsors.github-beneficiaries]\nsome-github-account = [\n    \"some-github-user\",\n    \"&amp;some-github-org\",\n]\n\n# A map of Polar sponsors to their beneficiaries.\n# Beneficiaries are users/organizations who get voting power\n# and are optionally granted access to your Insiders team.\n# TODO: Document supported values.\n[sponsors.polar-beneficiaries]\n</code></pre> <p>More documentation will be added later, for now ask @pawamoy for details (see where I can be reached on my profile) \ud83d\ude42</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#400-2025-03-03","title":"4.0.0 - 2025-03-03","text":"<p>Compare with 3.0.0</p>"},{"location":"changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li><code>Polar.get_issues</code>: Public object was removed</li> <li><code>Backlog.SortStrategy.min_pledge</code>: Public object was removed</li> <li><code>Backlog.SortStrategy.pledge</code>: Public object was removed</li> <li><code>Issue.pledged</code>: Public object was removed</li> <li><code>Issue.platform</code>: Public object was removed</li> <li><code>Issue(pledged)</code>: Parameter was removed</li> <li><code>Issue(platform)</code>: Parameter was removed</li> <li><code>IssueDict</code>: Public object was removed</li> <li><code>get_backlog(polar)</code>: Parameter was removed</li> <li><code>get_backlog(sponsors)</code>: Positional parameter was moved</li> <li><code>get_backlog(issue_labels)</code>: Positional parameter was moved</li> </ul>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Stop depending on pypi-insiders (a6b2473 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix checking issue funding when building backlog (773986b by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Polar metadata key (157ce94 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix in-place add for sponsors class (4f8161f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Synchronize API and inventory again, cleanup (27b45d7 by Timoth\u00e9e Mazzucotelli).</li> <li>Synchronize public API and objects inventory (37ddd00 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove boost feature (issue funding discontinued by Polar) (b62d293 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove unused org field on beneficiary class (4943556 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#300-2025-02-08","title":"3.0.0 - 2025-02-08","text":"<p>Big refactoring again. Configuration and models changed in a breaking way.</p> <p>Compare with 2.0.1</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Implement <code>sponsors list</code> command (af52d70 by Timoth\u00e9e Mazzucotelli). Issue-2, Issue-4</li> <li>Add dry-run mode for <code>sponsors team-sync</code> command (948d053 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Allow finer-grain logs filtering (c86bdd5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#201-2025-01-17","title":"2.0.1 - 2025-01-17","text":"<p>Compare with 2.0.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Don't load config twice (bbd7eb7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#200-2025-01-16","title":"2.0.0 - 2025-01-16","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<p>This project went under a complete refactoring. It provides much more features and now integrates the <code>pypi-insiders</code> project. Let us know what you think of our CLI!</p> <ul> <li>Format Copier answers with context (d056e3b by Timoth\u00e9e Mazzucotelli).</li> <li>Only warn about unknown keys (81b65d2 by Timoth\u00e9e Mazzucotelli).</li> <li>Check for unknown config keys (a343025 by Timoth\u00e9e Mazzucotelli).</li> <li>Bind more options to the config (85729fa by Timoth\u00e9e Mazzucotelli).</li> <li>Improve index class (1da458f by Timoth\u00e9e Mazzucotelli).</li> <li>Expose interception handler and its <code>allow</code> tuple (d2e5396 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve CLI and config (05c2704 by Timoth\u00e9e Mazzucotelli).</li> <li>Completely refactor project (7c080a3 by Timoth\u00e9e Mazzucotelli).</li> <li>Add library surface (b2be4ef by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2024-10-12","title":"1.0.0 - 2024-10-12","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Make the project public! (f6b3e08 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd insiders\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run insiders [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build insiders. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License annotated-types Reusable constraint types to use with typing.Annotated <code>&gt;=0.6.0</code> <code>0.7.0</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2, &gt;=1.0</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.8, &gt;=0.22</code> <code>0.26.5</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT colorama Cross-platform colored terminal text. <code>0.4.6</code> BSD License copier A library for rendering project templates. <code>&gt;=8.3</code> <code>9.5.0</code> MIT copier-templates-extensions Special Jinja2 extension for Copier that allows to load extensions using file paths relative to the template root instead of Python dotted paths. <code>&gt;=0.3</code> <code>0.3.0</code> ISC cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) dunamai Dynamic version generation <code>&gt;=1.7.0</code> <code>1.23.0</code> MIT funcy A fancy and practical functional tools <code>&gt;=1.17</code> <code>2.0</code> BSD id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=3.1.5, &gt;=2.11.1</code> <code>3.1.5</code> BSD License jinja2-ansible-filters A port of Ansible's jinja2 filters without requiring ansible core. <code>&gt;=1.3.1</code> <code>1.3.2</code> GPL3 keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License loguru Python logging made (stupidly) simple <code>&gt;=0.7</code> <code>0.7.3</code> MIT License markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0, &gt;=1.1</code> <code>3.0.2</code> BSD License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.1, &gt;=24.0</code> <code>24.2</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=4.3.6, &gt;=2.2.0</code> <code>4.3.6</code> MIT plumbum Plumbum: shell combinators library <code>&gt;=1.6.9</code> <code>1.9.0</code> MIT License prompt_toolkit Library for building powerful interactive command lines in Python <code>&gt;=2.0, &lt;4.0</code> <code>3.0.50</code> BSD License pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydantic Data validation using Python type hints <code>&gt;=2.4.2</code> <code>2.10.6</code> MIT pydantic_core Core functionality for Pydantic validation and serialization <code>==2.27.2</code> <code>2.27.2</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1</code> <code>2.19.1</code> BSD-2-Clause pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License PyYAML YAML parser and emitter for Python <code>&gt;=5.3.1</code> <code>6.0.2</code> MIT questionary Python library to build pretty command line user prompts \u2b50\ufe0f <code>&gt;=1.8.1</code> <code>2.1.0</code> MIT readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1, &gt;=4.0</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.8.0, &gt;=4.1</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License wcwidth Measures the displayed width of unicode strings in a terminal <code>0.2.13</code> MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.3</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2, &gt;=1.0</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.8, &gt;=0.22</code> <code>0.26.5</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.6.12</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.49</code> <code>1.5.7.1.3.1</code> ISC griffe-typingdoc Griffe extension for PEP 727 \u2013 Documentation Metadata in Typing. <code>&gt;=0.2</code> <code>0.2.8</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.1</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=3.1.5, &gt;=2.11.1</code> <code>3.1.5</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.0.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0, &gt;=1.1</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.0</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.3.0</code> MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.1</code> <code>0.1.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.5+insiders.4.53.15</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.9</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.25</code> <code>0.28.2</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.16.2.1.9.1</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.1, &gt;=24.0</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=4.3.6, &gt;=2.2.0</code> <code>4.3.6</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>2025.1</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.3.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 regex Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.11.6</code> Apache Software License requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.9.9</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.6</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1, &gt;=4.0</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20241204</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20241230</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.8.0, &gt;=4.1</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.3.3</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>insiders follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>insiders Insiders is a private fork of insiders, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are granted access to this private repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into insiders and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to all released features that you can start using right away, and which are exclusively available to sponsors. At this moment, there are no Insiders features for this project, but checkout the next funding goals to see what's coming, as well as the feature list for all Insiders projects.</p> <p>Additionally, your sponsorship will give more weight to your upvotes on issues, helping us prioritize work items in our backlog. For more information on how we prioritize work, see this page: Backlog management.</p>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Sponsorships lower than $10 a month are also very much appreciated, and useful. They won't grant you access to Insiders, but they will be counted towards reaching sponsorship goals. Every sponsorship helps us implementing new features and releasing them to the public.</p> <p>Important: By default, when you're sponsoring @pawamoy through a GitHub organization, all the publicly visible members of the organization will be invited to join our private repositories. If you wish to only grant access to a subset of users, please send a short email to insiders@pawamoy.fr with the name of your organization and the GitHub accounts of the users that should be granted access.</p> <p>Tip: to ensure that access is not tied to a particular individual GitHub account, you can create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being granted access to our private repositories, the bot account can create private forks of our private repositories into your own organization, which all members of your organization will have access to.</p> <p>You can cancel your sponsorship anytime.<sup>4</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to your profile and avatar to show your support for insiders. Alternatively, if you wish to keep your sponsorship private, you'll be a silent +1. You can select visibility during checkout and change it afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or  planned, but not yet implemented. When the funding goal is hit, the features are released for general availability.</p> <p></p>"},{"location":"insiders/#1500-hyperlamp-navigation-tips","title":"$ 1,500 \u2014 HyperLamp Navigation Tips","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#2000-fusiondrive-ejection-configuration","title":"$ 2,000 \u2014 FusionDrive Ejection Configuration","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#1000-gravifridge-fluid-renewal","title":"$ 1,000 \u2014 GraviFridge Fluid Renewal","text":"<ul> <li> [Project] Manage your Insiders projects</li> </ul>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use insiders locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with insiders. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to insiders@pawamoy.fr.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as insiders?</p> <p>Yes. Whether you're an individual or a company, you may use insiders Insiders precisely under the same terms as insiders, which are given by the ISC license. However, we kindly ask you to respect our fair use policy:</p> <ul> <li>Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, privately fork or mirror it, but please don't make the source code public, as it would counteract the sponsorware strategy.</li> <li>If you cancel your subscription, your access to the private repository is revoked, and you will miss out on all future updates of Insiders. However, you may use the latest version that's available to you as long as you like. Just remember that GitHub deletes private forks.</li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by insiders.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use insiders, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#insiders-insiders","title":"insiders Insiders","text":""},{"location":"insiders/changelog/#1.0.2","title":"1.0.2 May 25, 2024","text":"<ul> <li>Output complete skeleton for public project, not just README and workflow</li> <li>Use copier-uv template for my own projects</li> </ul>"},{"location":"insiders/changelog/#1.0.1","title":"1.0.1 November 23, 2023","text":"<ul> <li>Fix bug in commands (pop <code>help</code> flag)</li> </ul>"},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 October 29, 2023","text":"<ul> <li>Release first Insiders version</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>insiders Insiders is a compatible drop-in replacement for insiders, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-the-insiders-tool","title":"with the <code>insiders</code> tool","text":"<p><code>insiders</code> is a tool that helps you keep up-to-date versions of Insiders projects in the PyPI index of your choice (self-hosted, Google registry, Artifactory, etc.).</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>insiders Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/insiders.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/insiders.git\n</code></pre> How to get a GitHub personal access token? <p> The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-git","title":"with Git","text":"<p>Of course, you can use insiders Insiders directly using Git:</p> <pre><code>git clone git@github.com:pawamoy-insiders/insiders\n</code></pre> <p>When cloning with Git, the package must be installed:</p> <pre><code>pip install -e insiders\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of insiders which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/api/insiders/","title":"API reference","text":""},{"location":"reference/api/insiders/#insiders","title":"insiders","text":"<p>insiders package.</p> <p>Manage your Insiders projects.</p> <p>Classes:</p> <ul> <li> <code>Account</code>           \u2013            <p>An account.</p> </li> <li> <code>Backlog</code>           \u2013            <p>Backlog of issues.</p> </li> <li> <code>Beneficiary</code>           \u2013            <p>A sponsorship beneficiary: a user, grant bit, and optional org.</p> </li> <li> <code>CommandBacklog</code>           \u2013            <p>Command to list the backlog of issues.</p> </li> <li> <code>CommandIndex</code>           \u2013            <p>Command to manage the local index.</p> </li> <li> <code>CommandIndexAdd</code>           \u2013            <p>Command to add a repository to the watched repositories.</p> </li> <li> <code>CommandIndexList</code>           \u2013            <p>Command to list the watched repositories.</p> </li> <li> <code>CommandIndexLogs</code>           \u2013            <p>Command to show the server logs.</p> </li> <li> <code>CommandIndexRemove</code>           \u2013            <p>Command to remove a repository and its distributions (if served locally).</p> </li> <li> <code>CommandIndexStart</code>           \u2013            <p>Command to start the server.</p> </li> <li> <code>CommandIndexStatus</code>           \u2013            <p>Command to show the server status.</p> </li> <li> <code>CommandIndexStop</code>           \u2013            <p>Command to stop the server.</p> </li> <li> <code>CommandIndexUpdate</code>           \u2013            <p>Command to update watched projects.</p> </li> <li> <code>CommandMain</code>           \u2013            <p>Command to manage your Insiders projects.</p> </li> <li> <code>CommandProject</code>           \u2013            <p>Command to manage projects on GitHub and locally.</p> </li> <li> <code>CommandProjectCheck</code>           \u2013            <p>Command to check GitHub projects.</p> </li> <li> <code>CommandProjectCreate</code>           \u2013            <p>Command to create public/insiders repositories.</p> </li> <li> <code>CommandProjectPyPIRegister</code>           \u2013            <p>Command to register a project name on PyPI.</p> </li> <li> <code>CommandSponsors</code>           \u2013            <p>Command to manage sponsors.</p> </li> <li> <code>CommandSponsorsList</code>           \u2013            <p>Command to list sponsors.</p> </li> <li> <code>CommandSponsorsShow</code>           \u2013            <p>Command to show details about a sponsor/user.</p> </li> <li> <code>CommandSponsorsTeamList</code>           \u2013            <p>Command to list team memberships.</p> </li> <li> <code>CommandSponsorsTeamSync</code>           \u2013            <p>Command to sync team memberships with current sponsors.</p> </li> <li> <code>Config</code>           \u2013            <p>Configuration for the insiders project.</p> </li> <li> <code>GitHub</code>           \u2013            <p>GitHub client.</p> </li> <li> <code>Index</code>           \u2013            <p>Index of repositories.</p> </li> <li> <code>Issue</code>           \u2013            <p>An issue.</p> </li> <li> <code>Polar</code>           \u2013            <p>Polar client.</p> </li> <li> <code>Sponsors</code>           \u2013            <p>Wrapper class for sponsorships.</p> </li> <li> <code>Sponsorship</code>           \u2013            <p>A sponsorship.</p> </li> <li> <code>Unset</code>           \u2013            <p>A sentinel value for unset configuration options.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>config_field</code>             \u2013              <p>Get a dataclass field with a TOML key.</p> </li> <li> <code>get_backlog</code>             \u2013              <p>Get the backlog.</p> </li> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> <li> <code>new_public_and_insiders_github_projects</code>             \u2013              <p>Create a new Insiders project on GitHub (public and private repositories).</p> </li> <li> <code>print_backlog</code>             \u2013              <p>Print the backlog.</p> </li> <li> <code>print_sponsors</code>             \u2013              <p>Print the sponsors/sponsorships.</p> </li> <li> <code>reserve_pypi</code>             \u2013              <p>Reserve a name on PyPI.</p> </li> <li> <code>update_numbers_file</code>             \u2013              <p>Update the file storing sponsorship numbers.</p> </li> <li> <code>update_sponsors_file</code>             \u2013              <p>Update the file storing sponsors info.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>DEFAULT_CONF_DIR</code>               (<code>Path</code>)           \u2013            <p>The default configuration directory.</p> </li> <li> <code>DEFAULT_CONF_PATH</code>               (<code>Path</code>)           \u2013            <p>The default configuration file path.</p> </li> <li> <code>DEFAULT_DIST_DIR</code>               (<code>Path</code>)           \u2013            <p>The default index distributions directory</p> </li> <li> <code>DEFAULT_INDEX_URL</code>               (<code>str</code>)           \u2013            <p>The default index URL.</p> </li> <li> <code>DEFAULT_PORT</code>               (<code>int</code>)           \u2013            <p>The default index port.</p> </li> <li> <code>DEFAULT_REPO_DIR</code>               (<code>Path</code>)           \u2013            <p>The default Git repository (clones) cache directory.</p> </li> <li> <code>SponsorshipPlatform</code>               (<code>TypeAlias</code>)           \u2013            <p>The supported sponsorship platforms.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.DEFAULT_CONF_DIR","title":"DEFAULT_CONF_DIR  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONF_DIR: Path = Path(user_config_dir(_APP_NAME))\n</code></pre> <p>The default configuration directory.</p>"},{"location":"reference/api/insiders/#insiders.DEFAULT_CONF_PATH","title":"DEFAULT_CONF_PATH  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONF_PATH: Path = DEFAULT_CONF_DIR / \"insiders.toml\"\n</code></pre> <p>The default configuration file path.</p>"},{"location":"reference/api/insiders/#insiders.DEFAULT_DIST_DIR","title":"DEFAULT_DIST_DIR  <code>module-attribute</code>","text":"<pre><code>DEFAULT_DIST_DIR: Path = Path(\n    user_data_dir(_APP_NAME, _APP_AUTHOR)\n)\n</code></pre> <p>The default index distributions directory</p>"},{"location":"reference/api/insiders/#insiders.DEFAULT_INDEX_URL","title":"DEFAULT_INDEX_URL  <code>module-attribute</code>","text":"<pre><code>DEFAULT_INDEX_URL: str = f'http://localhost:{DEFAULT_PORT}'\n</code></pre> <p>The default index URL.</p>"},{"location":"reference/api/insiders/#insiders.DEFAULT_PORT","title":"DEFAULT_PORT  <code>module-attribute</code>","text":"<pre><code>DEFAULT_PORT: int = 31411\n</code></pre> <p>The default index port.</p>"},{"location":"reference/api/insiders/#insiders.DEFAULT_REPO_DIR","title":"DEFAULT_REPO_DIR  <code>module-attribute</code>","text":"<pre><code>DEFAULT_REPO_DIR: Path = Path(\n    user_cache_dir(_APP_NAME, _APP_AUTHOR)\n)\n</code></pre> <p>The default Git repository (clones) cache directory.</p>"},{"location":"reference/api/insiders/#insiders.SponsorshipPlatform","title":"SponsorshipPlatform  <code>module-attribute</code>","text":"<pre><code>SponsorshipPlatform: TypeAlias = Literal['github', 'polar']\n</code></pre> <p>The supported sponsorship platforms.</p>"},{"location":"reference/api/insiders/#insiders.Account","title":"Account  <code>dataclass</code>","text":"<pre><code>Account(\n    *,\n    name: str,\n    image: str | None = None,\n    url: str | None = None,\n    platform: SponsorshipPlatform,\n    is_org: bool = False,\n    sponsorships: list[Sponsorship] = list(),\n    included: bool = False,\n    excluded: bool = False,\n)\n</code></pre> <p>An account.</p> <p>Attributes:</p> <ul> <li> <code>direct_sponsor</code>               (<code>bool</code>)           \u2013            <p>Return whether the account is a direct sponsor.</p> </li> <li> <code>excluded</code>               (<code>bool</code>)           \u2013            <p>Indicates if the account is excluded from the sponsors list.</p> </li> <li> <code>highest_tier</code>               (<code>int</code>)           \u2013            <p>Return the highest tier amount.</p> </li> <li> <code>image</code>               (<code>str | None</code>)           \u2013            <p>The image URL of the account.</p> </li> <li> <code>included</code>               (<code>bool</code>)           \u2013            <p>Indicates if the account is included in the sponsors list.</p> </li> <li> <code>is_org</code>               (<code>bool</code>)           \u2013            <p>Indicates if the account is an organization.</p> </li> <li> <code>is_user</code>               (<code>bool</code>)           \u2013            <p>Return whether the account is a user.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the account.</p> </li> <li> <code>platform</code>               (<code>SponsorshipPlatform</code>)           \u2013            <p>The platform of the account.</p> </li> <li> <code>sponsorships</code>               (<code>list[Sponsorship]</code>)           \u2013            <p>List of sponsorships associated with the account</p> </li> <li> <code>tier_sum</code>               (<code>int</code>)           \u2013            <p>Return the sum of all tier amounts.</p> </li> <li> <code>url</code>               (<code>str | None</code>)           \u2013            <p>The URL of the account.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Account.direct_sponsor","title":"direct_sponsor  <code>property</code>","text":"<pre><code>direct_sponsor: bool\n</code></pre> <p>Return whether the account is a direct sponsor.</p>"},{"location":"reference/api/insiders/#insiders.Account.excluded","title":"excluded  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>excluded: bool = False\n</code></pre> <p>Indicates if the account is excluded from the sponsors list.</p>"},{"location":"reference/api/insiders/#insiders.Account.highest_tier","title":"highest_tier  <code>property</code>","text":"<pre><code>highest_tier: int\n</code></pre> <p>Return the highest tier amount.</p>"},{"location":"reference/api/insiders/#insiders.Account.image","title":"image  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>image: str | None = None\n</code></pre> <p>The image URL of the account.</p>"},{"location":"reference/api/insiders/#insiders.Account.included","title":"included  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>included: bool = False\n</code></pre> <p>Indicates if the account is included in the sponsors list.</p>"},{"location":"reference/api/insiders/#insiders.Account.is_org","title":"is_org  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_org: bool = False\n</code></pre> <p>Indicates if the account is an organization.</p>"},{"location":"reference/api/insiders/#insiders.Account.is_user","title":"is_user  <code>property</code>","text":"<pre><code>is_user: bool\n</code></pre> <p>Return whether the account is a user.</p>"},{"location":"reference/api/insiders/#insiders.Account.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the account.</p>"},{"location":"reference/api/insiders/#insiders.Account.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: SponsorshipPlatform\n</code></pre> <p>The platform of the account.</p>"},{"location":"reference/api/insiders/#insiders.Account.sponsorships","title":"sponsorships  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsorships: list[Sponsorship] = field(\n    default_factory=list\n)\n</code></pre> <p>List of sponsorships associated with the account</p>"},{"location":"reference/api/insiders/#insiders.Account.tier_sum","title":"tier_sum  <code>property</code>","text":"<pre><code>tier_sum: int\n</code></pre> <p>Return the sum of all tier amounts.</p>"},{"location":"reference/api/insiders/#insiders.Account.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str | None = None\n</code></pre> <p>The URL of the account.</p>"},{"location":"reference/api/insiders/#insiders.Backlog","title":"Backlog  <code>dataclass</code>","text":"<pre><code>Backlog(*, issues: list[Issue] = list())\n</code></pre> <p>Backlog of issues.</p> <p>Classes:</p> <ul> <li> <code>SortStrategy</code>           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>sort</code>             \u2013              <p>Sort the backlog.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>issues</code>               (<code>list[Issue]</code>)           \u2013            <p>A list of issues.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.issues","title":"issues  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>issues: list[Issue] = field(default_factory=list)\n</code></pre> <p>A list of issues.</p>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy","title":"SortStrategy","text":"<p>Methods:</p> <ul> <li> <code>author_sponsorships</code>             \u2013              <p>Sort by author sponsorships.</p> </li> <li> <code>created</code>             \u2013              <p>Sort by creation date.</p> </li> <li> <code>label</code>             \u2013              <p>Sort by label presence.</p> </li> <li> <code>min_author_sponsorships</code>             \u2013              <p>Sort by minimum author sponsorships.</p> </li> <li> <code>min_sponsorships</code>             \u2013              <p>Sort by minimum sponsorships.</p> </li> <li> <code>min_upvoters_sponsorships</code>             \u2013              <p>Sort by minimum upvoters sponsorships.</p> </li> <li> <code>min_upvotes</code>             \u2013              <p>Sort by minimum upvotes.</p> </li> <li> <code>repository</code>             \u2013              <p>Sort by repository.</p> </li> <li> <code>sponsorships</code>             \u2013              <p>Sort by sponsorships.</p> </li> <li> <code>upvoters_sponsorships</code>             \u2013              <p>Sort by upvoters sponsorships.</p> </li> <li> <code>upvotes</code>             \u2013              <p>Sort by upvotes.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.author_sponsorships","title":"author_sponsorships  <code>staticmethod</code>","text":"<pre><code>author_sponsorships(\n    *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by author sponsorships.</p> <p>Parameters:</p> <ul> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.created","title":"created  <code>staticmethod</code>","text":"<pre><code>created(*, reverse: bool = False) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by creation date.</p> <p>Parameters:</p> <ul> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.label","title":"label  <code>staticmethod</code>","text":"<pre><code>label(\n    name: str, *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by label presence.</p> <p>Parameters:</p> <ul> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.min_author_sponsorships","title":"min_author_sponsorships  <code>staticmethod</code>","text":"<pre><code>min_author_sponsorships(\n    amount: int, *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by minimum author sponsorships.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>Minimum amount.</p> </li> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.min_sponsorships","title":"min_sponsorships  <code>staticmethod</code>","text":"<pre><code>min_sponsorships(\n    amount: int, *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by minimum sponsorships.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>Minimum amount.</p> </li> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.min_upvoters_sponsorships","title":"min_upvoters_sponsorships  <code>staticmethod</code>","text":"<pre><code>min_upvoters_sponsorships(\n    amount: int, *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by minimum upvoters sponsorships.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>Minimum amount.</p> </li> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.min_upvotes","title":"min_upvotes  <code>staticmethod</code>","text":"<pre><code>min_upvotes(\n    amount: int, *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by minimum upvotes.</p> <p>Parameters:</p> <ul> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>Minimum amount.</p> </li> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.repository","title":"repository  <code>staticmethod</code>","text":"<pre><code>repository(\n    name: str, *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by repository.</p> <p>Parameters:</p> <ul> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.sponsorships","title":"sponsorships  <code>staticmethod</code>","text":"<pre><code>sponsorships(\n    *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by sponsorships.</p> <p>Parameters:</p> <ul> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.upvoters_sponsorships","title":"upvoters_sponsorships  <code>staticmethod</code>","text":"<pre><code>upvoters_sponsorships(\n    *, reverse: bool = True\n) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by upvoters sponsorships.</p> <p>Parameters:</p> <ul> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.SortStrategy.upvotes","title":"upvotes  <code>staticmethod</code>","text":"<pre><code>upvotes(*, reverse: bool = True) -&gt; Callable[[Issue], int]\n</code></pre> <p>Sort by upvotes.</p> <p>Parameters:</p> <ul> <li> <code>reverse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Sort in reverse.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Backlog.sort","title":"sort","text":"<pre><code>sort(*strats: Callable[[Issue], Any]) -&gt; None\n</code></pre> <p>Sort the backlog.</p>"},{"location":"reference/api/insiders/#insiders.Beneficiary","title":"Beneficiary  <code>dataclass</code>","text":"<pre><code>Beneficiary(*, user: Account, grant: bool | None = None)\n</code></pre> <p>A sponsorship beneficiary: a user, grant bit, and optional org.</p> <p>Attributes:</p> <ul> <li> <code>grant</code>               (<code>bool | None</code>)           \u2013            <p>Whether the user is granted access to Insiders (in addition to getting voting power).</p> </li> <li> <code>user</code>               (<code>Account</code>)           \u2013            <p>The user who benefits from the sponsorship.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Beneficiary.grant","title":"grant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>grant: bool | None = None\n</code></pre> <p>Whether the user is granted access to Insiders (in addition to getting voting power).</p>"},{"location":"reference/api/insiders/#insiders.Beneficiary.user","title":"user  <code>instance-attribute</code>","text":"<pre><code>user: Account\n</code></pre> <p>The user who benefits from the sponsorship.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog","title":"CommandBacklog  <code>dataclass</code>","text":"<pre><code>CommandBacklog(\n    *,\n    backlog_namespaces: list[str],\n    issue_labels: dict[str, str] = dict(),\n    limit: int = 0,\n    sort: list[Callable] = list(),\n    public: bool = False,\n    polar_token: str = \"\",\n    polar_beneficiaries: dict[str, list[str]] = dict(),\n    github_token: str = \"\",\n    github_beneficiaries: dict[str, list[str]] = dict(),\n)\n</code></pre> <p>Command to list the backlog of issues.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>backlog_namespaces</code>               (<code>list[str]</code>)           \u2013            <p>Namespaces to fetch issues from.</p> </li> <li> <code>github_beneficiaries</code>               (<code>dict[str, list[str]]</code>)           \u2013            <p>Beneficiaries of GitHub sponsors.</p> </li> <li> <code>github_token</code>               (<code>str</code>)           \u2013            <p>A GitHub token. Recommended scopes: <code>read:user</code>.</p> </li> <li> <code>issue_labels</code>               (<code>dict[str, str]</code>)           \u2013            <p>Issue labels to keep in issues metadata, and how they are represented.</p> </li> <li> <code>limit</code>               (<code>int</code>)           \u2013            <p>Limit the number of issues to display.</p> </li> <li> <code>polar_beneficiaries</code>               (<code>dict[str, list[str]]</code>)           \u2013            <p>Beneficiaries of Polar sponsors.</p> </li> <li> <code>polar_token</code>               (<code>str</code>)           \u2013            <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p> </li> <li> <code>public</code>               (<code>bool</code>)           \u2013            <p>Only use public sponsorships.</p> </li> <li> <code>sort</code>               (<code>list[Callable]</code>)           \u2013            <p>Sort strategy.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.backlog_namespaces","title":"backlog_namespaces  <code>instance-attribute</code>","text":"<pre><code>backlog_namespaces: list[str]\n</code></pre> <p>Namespaces to fetch issues from.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.github_beneficiaries","title":"github_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_beneficiaries: dict[str, list[str]] = field(\n    default_factory=dict\n)\n</code></pre> <p>Beneficiaries of GitHub sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.github_token","title":"github_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_token: str = ''\n</code></pre> <p>A GitHub token. Recommended scopes: <code>read:user</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.issue_labels","title":"issue_labels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>issue_labels: dict[str, str] = field(default_factory=dict)\n</code></pre> <p>Issue labels to keep in issues metadata, and how they are represented.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.limit","title":"limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>limit: int = 0\n</code></pre> <p>Limit the number of issues to display.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.polar_beneficiaries","title":"polar_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_beneficiaries: dict[str, list[str]] = field(\n    default_factory=dict\n)\n</code></pre> <p>Beneficiaries of Polar sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.polar_token","title":"polar_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_token: str = ''\n</code></pre> <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.public","title":"public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>public: bool = False\n</code></pre> <p>Only use public sponsorships.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.sort","title":"sort  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sort: list[Callable] = field(default_factory=list)\n</code></pre> <p>Sort strategy.</p>"},{"location":"reference/api/insiders/#insiders.CommandBacklog.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndex","title":"CommandIndex  <code>dataclass</code>","text":"<pre><code>CommandIndex(\n    *,\n    subcommand: CommandIndexList\n    | CommandIndexAdd\n    | CommandIndexRemove\n    | CommandIndexUpdate\n    | CommandIndexStart\n    | CommandIndexStatus\n    | CommandIndexStop\n    | CommandIndexLogs,\n)\n</code></pre> <p>Command to manage the local index.</p> <p>Attributes:</p> <ul> <li> <code>subcommand</code>               (<code>CommandIndexList | CommandIndexAdd | CommandIndexRemove | CommandIndexUpdate | CommandIndexStart | CommandIndexStatus | CommandIndexStop | CommandIndexLogs</code>)           \u2013            <p>The selected subcommand.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndex.subcommand","title":"subcommand  <code>instance-attribute</code>","text":"<pre><code>subcommand: (\n    CommandIndexList\n    | CommandIndexAdd\n    | CommandIndexRemove\n    | CommandIndexUpdate\n    | CommandIndexStart\n    | CommandIndexStatus\n    | CommandIndexStop\n    | CommandIndexLogs\n)\n</code></pre> <p>The selected subcommand.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexAdd","title":"CommandIndexAdd  <code>dataclass</code>","text":"<pre><code>CommandIndexAdd(\n    *,\n    repositories: list[str],\n    sources_directory: Path = DEFAULT_REPO_DIR,\n    distributions_directory: Path = DEFAULT_DIST_DIR,\n    url: str = DEFAULT_INDEX_URL,\n)\n</code></pre> <p>Command to add a repository to the watched repositories.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>distributions_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the distributions are stored.</p> </li> <li> <code>repositories</code>               (<code>list[str]</code>)           \u2013            <p>List of repositories (GitHub namespace/project or Git URL git@host:repo).</p> </li> <li> <code>sources_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the sources are stored.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>URL of the index to upload packages to.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexAdd.distributions_directory","title":"distributions_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distributions_directory: Path = DEFAULT_DIST_DIR\n</code></pre> <p>Directory where the distributions are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexAdd.repositories","title":"repositories  <code>instance-attribute</code>","text":"<pre><code>repositories: list[str]\n</code></pre> <p>List of repositories (GitHub namespace/project or Git URL git@host:repo).</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexAdd.sources_directory","title":"sources_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sources_directory: Path = DEFAULT_REPO_DIR\n</code></pre> <p>Directory where the sources are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexAdd.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = DEFAULT_INDEX_URL\n</code></pre> <p>URL of the index to upload packages to.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexAdd.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexList","title":"CommandIndexList  <code>dataclass</code>","text":"<pre><code>CommandIndexList(\n    *,\n    sources_directory: Path = DEFAULT_REPO_DIR,\n    distributions_directory: Path = DEFAULT_DIST_DIR,\n    dists: bool = False,\n    projects: bool = False,\n)\n</code></pre> <p>Command to list the watched repositories.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>distributions_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the distributions are stored.</p> </li> <li> <code>dists</code>               (<code>bool</code>)           \u2013            <p>List distributions.</p> </li> <li> <code>projects</code>               (<code>bool</code>)           \u2013            <p>List projects.</p> </li> <li> <code>sources_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the sources are stored.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexList.distributions_directory","title":"distributions_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distributions_directory: Path = DEFAULT_DIST_DIR\n</code></pre> <p>Directory where the distributions are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexList.dists","title":"dists  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dists: bool = False\n</code></pre> <p>List distributions.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexList.projects","title":"projects  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>projects: bool = False\n</code></pre> <p>List projects.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexList.sources_directory","title":"sources_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sources_directory: Path = DEFAULT_REPO_DIR\n</code></pre> <p>Directory where the sources are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexList.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexLogs","title":"CommandIndexLogs  <code>dataclass</code>","text":"<pre><code>CommandIndexLogs()\n</code></pre> <p>Command to show the server logs.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexLogs.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexRemove","title":"CommandIndexRemove  <code>dataclass</code>","text":"<pre><code>CommandIndexRemove(\n    *,\n    repositories: list[str],\n    sources_directory: Path = DEFAULT_REPO_DIR,\n    distributions_directory: Path = DEFAULT_DIST_DIR,\n)\n</code></pre> <p>Command to remove a repository and its distributions (if served locally).</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>distributions_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the distributions are stored.</p> </li> <li> <code>repositories</code>               (<code>list[str]</code>)           \u2013            <p>List of repository names.</p> </li> <li> <code>sources_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the sources are stored.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexRemove.distributions_directory","title":"distributions_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distributions_directory: Path = DEFAULT_DIST_DIR\n</code></pre> <p>Directory where the distributions are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexRemove.repositories","title":"repositories  <code>instance-attribute</code>","text":"<pre><code>repositories: list[str]\n</code></pre> <p>List of repository names.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexRemove.sources_directory","title":"sources_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sources_directory: Path = DEFAULT_REPO_DIR\n</code></pre> <p>Directory where the sources are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexRemove.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexStart","title":"CommandIndexStart  <code>dataclass</code>","text":"<pre><code>CommandIndexStart(\n    *,\n    sources_directory: Path = DEFAULT_REPO_DIR,\n    distributions_directory: Path = DEFAULT_DIST_DIR,\n    url: str = DEFAULT_INDEX_URL,\n    background: bool = False,\n    log_path: str | None = None,\n)\n</code></pre> <p>Command to start the server.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>background</code>               (<code>bool</code>)           \u2013            <p>Run the server in the background.</p> </li> <li> <code>distributions_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the distributions are stored.</p> </li> <li> <code>log_path</code>               (<code>str | None</code>)           \u2013            <p>Where to write index server logs.</p> </li> <li> <code>sources_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the sources are stored.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>URL to serve the index at.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexStart.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background: bool = False\n</code></pre> <p>Run the server in the background.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexStart.distributions_directory","title":"distributions_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distributions_directory: Path = DEFAULT_DIST_DIR\n</code></pre> <p>Directory where the distributions are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexStart.log_path","title":"log_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_path: str | None = None\n</code></pre> <p>Where to write index server logs.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexStart.sources_directory","title":"sources_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sources_directory: Path = DEFAULT_REPO_DIR\n</code></pre> <p>Directory where the sources are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexStart.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = DEFAULT_INDEX_URL\n</code></pre> <p>URL to serve the index at.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexStart.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexStatus","title":"CommandIndexStatus  <code>dataclass</code>","text":"<pre><code>CommandIndexStatus()\n</code></pre> <p>Command to show the server status.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexStatus.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexStop","title":"CommandIndexStop  <code>dataclass</code>","text":"<pre><code>CommandIndexStop()\n</code></pre> <p>Command to stop the server.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexStop.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexUpdate","title":"CommandIndexUpdate  <code>dataclass</code>","text":"<pre><code>CommandIndexUpdate(\n    *,\n    repositories: list[str] = list(),\n    sources_directory: Path = DEFAULT_REPO_DIR,\n    distributions_directory: Path = DEFAULT_DIST_DIR,\n    url: str = DEFAULT_INDEX_URL,\n)\n</code></pre> <p>Command to update watched projects.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>distributions_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the distributions are stored.</p> </li> <li> <code>repositories</code>               (<code>list[str]</code>)           \u2013            <p>List of repository names.</p> </li> <li> <code>sources_directory</code>               (<code>Path</code>)           \u2013            <p>Directory where the sources are stored.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>URL of the index to upload packages to.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandIndexUpdate.distributions_directory","title":"distributions_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distributions_directory: Path = DEFAULT_DIST_DIR\n</code></pre> <p>Directory where the distributions are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexUpdate.repositories","title":"repositories  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repositories: list[str] = field(default_factory=list)\n</code></pre> <p>List of repository names.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexUpdate.sources_directory","title":"sources_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sources_directory: Path = DEFAULT_REPO_DIR\n</code></pre> <p>Directory where the sources are stored.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexUpdate.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = DEFAULT_INDEX_URL\n</code></pre> <p>URL of the index to upload packages to.</p>"},{"location":"reference/api/insiders/#insiders.CommandIndexUpdate.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandMain","title":"CommandMain  <code>dataclass</code>","text":"<pre><code>CommandMain(\n    *,\n    subcommand: CommandBacklog\n    | CommandIndex\n    | CommandProject\n    | CommandSponsors,\n    version: bool = False,\n    debug_info: bool = False,\n    config: Config = _load_config(),\n    log_level: Literal[\n        \"TRACE\",\n        \"DEBUG\",\n        \"INFO\",\n        \"SUCCESS\",\n        \"WARNING\",\n        \"ERROR\",\n        \"CRITICAL\",\n    ] = \"INFO\",\n    log_path: str | None = None,\n    log_include: tuple[str, ...] = tuple(),\n    log_exclude: tuple[str, ...] = tuple(),\n    log_downgrade: tuple[str, ...] = tuple(),\n)\n</code></pre> <p>Command to manage your Insiders projects.</p> <p>Attributes:</p> <ul> <li> <code>config</code>               (<code>Config</code>)           \u2013            <p>Path to the configuration file.</p> </li> <li> <code>debug_info</code>               (<code>bool</code>)           \u2013            <p>Print debug information.</p> </li> <li> <code>log_downgrade</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>Downgrade INFO logs to DEBUG for logs originating from these modules/loggers. By default, all dependency logs are downgraded.</p> </li> <li> <code>log_exclude</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>Exclude logs originating from these modules/loggers. Applied after inclusion. By default, nothing is excluded.</p> </li> <li> <code>log_include</code>               (<code>tuple[str, ...]</code>)           \u2013            <p>Include logs originating from these modules/loggers. By default, all logs are included.</p> </li> <li> <code>log_level</code>               (<code>Literal['TRACE', 'DEBUG', 'INFO', 'SUCCESS', 'WARNING', 'ERROR', 'CRITICAL']</code>)           \u2013            <p>Lowest log level to display. Levels below that will be hidden.</p> </li> <li> <code>log_path</code>               (<code>str | None</code>)           \u2013            <p>Write log messages to this file path.</p> </li> <li> <code>subcommand</code>               (<code>CommandBacklog | CommandIndex | CommandProject | CommandSponsors</code>)           \u2013            <p>The selected subcommand.</p> </li> <li> <code>version</code>               (<code>bool</code>)           \u2013            <p>Print the program version and exit.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandMain.config","title":"config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>config: Config = field(default_factory=_load_config)\n</code></pre> <p>Path to the configuration file.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.debug_info","title":"debug_info  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug_info: bool = False\n</code></pre> <p>Print debug information.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.log_downgrade","title":"log_downgrade  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_downgrade: tuple[str, ...] = field(\n    default_factory=tuple\n)\n</code></pre> <p>Downgrade INFO logs to DEBUG for logs originating from these modules/loggers. By default, all dependency logs are downgraded.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.log_exclude","title":"log_exclude  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_exclude: tuple[str, ...] = field(default_factory=tuple)\n</code></pre> <p>Exclude logs originating from these modules/loggers. Applied after inclusion. By default, nothing is excluded.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.log_include","title":"log_include  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_include: tuple[str, ...] = field(default_factory=tuple)\n</code></pre> <p>Include logs originating from these modules/loggers. By default, all logs are included.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.log_level","title":"log_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_level: Literal[\n    \"TRACE\",\n    \"DEBUG\",\n    \"INFO\",\n    \"SUCCESS\",\n    \"WARNING\",\n    \"ERROR\",\n    \"CRITICAL\",\n] = \"INFO\"\n</code></pre> <p>Lowest log level to display. Levels below that will be hidden.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.log_path","title":"log_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_path: str | None = None\n</code></pre> <p>Write log messages to this file path.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.subcommand","title":"subcommand  <code>instance-attribute</code>","text":"<pre><code>subcommand: (\n    CommandBacklog\n    | CommandIndex\n    | CommandProject\n    | CommandSponsors\n)\n</code></pre> <p>The selected subcommand.</p>"},{"location":"reference/api/insiders/#insiders.CommandMain.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version: bool = False\n</code></pre> <p>Print the program version and exit.</p>"},{"location":"reference/api/insiders/#insiders.CommandProject","title":"CommandProject  <code>dataclass</code>","text":"<pre><code>CommandProject(\n    *,\n    subcommand: CommandProjectCreate\n    | CommandProjectCheck\n    | CommandProjectPyPIRegister,\n)\n</code></pre> <p>Command to manage projects on GitHub and locally.</p> <p>Attributes:</p> <ul> <li> <code>subcommand</code>               (<code>CommandProjectCreate | CommandProjectCheck | CommandProjectPyPIRegister</code>)           \u2013            <p>The selected subcommand.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandProject.subcommand","title":"subcommand  <code>instance-attribute</code>","text":"<pre><code>subcommand: (\n    CommandProjectCreate\n    | CommandProjectCheck\n    | CommandProjectPyPIRegister\n)\n</code></pre> <p>The selected subcommand.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCheck","title":"CommandProjectCheck  <code>dataclass</code>","text":"<pre><code>CommandProjectCheck()\n</code></pre> <p>Command to check GitHub projects.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandProjectCheck.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate","title":"CommandProjectCreate  <code>dataclass</code>","text":"<pre><code>CommandProjectCreate(\n    *,\n    repository: str,\n    description: str,\n    namespace: str,\n    project_directory: Path,\n    insiders_repository: str | None = None,\n    insiders_namespace: str | None = None,\n    insiders_project_directory: Path,\n    github_username: str | None = None,\n    copier_template: str | None = None,\n    copier_template_answers: dict[str, str] | None = None,\n    post_creation_command: list[str] | None = None,\n    register_on_pypi: bool = False,\n    pypi_username: str | None = None,\n)\n</code></pre> <p>Command to create public/insiders repositories.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>copier_template</code>               (<code>str | None</code>)           \u2013            <p>Copier template to generate new projects with.</p> </li> <li> <code>copier_template_answers</code>               (<code>dict[str, str] | None</code>)           \u2013            <p>Copier template answers to use when generating a project.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Shared description.</p> </li> <li> <code>github_username</code>               (<code>str | None</code>)           \u2013            <p>GitHub username.</p> </li> <li> <code>insiders_namespace</code>               (<code>str | None</code>)           \u2013            <p>Namespace of the insiders repository.</p> </li> <li> <code>insiders_project_directory</code>               (<code>Path</code>)           \u2013            <p>Directory in which to clone the insiders repository.</p> </li> <li> <code>insiders_repository</code>               (<code>str | None</code>)           \u2013            <p>Name of the insiders repository.</p> </li> <li> <code>namespace</code>               (<code>str</code>)           \u2013            <p>Namespace of the public repository.</p> </li> <li> <code>post_creation_command</code>               (<code>list[str] | None</code>)           \u2013            <p>Command to run after creating the public repository.</p> </li> <li> <code>project_directory</code>               (<code>Path</code>)           \u2013            <p>Directory in which to clone the public repository.</p> </li> <li> <code>pypi_username</code>               (<code>str | None</code>)           \u2013            <p>PyPI username to register the project with.</p> </li> <li> <code>register_on_pypi</code>               (<code>bool</code>)           \u2013            <p>Whether to register the project on PyPI after creating it.</p> </li> <li> <code>repository</code>               (<code>str</code>)           \u2013            <p>Name of the public repository.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.copier_template","title":"copier_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>copier_template: str | None = None\n</code></pre> <p>Copier template to generate new projects with.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.copier_template_answers","title":"copier_template_answers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>copier_template_answers: dict[str, str] | None = None\n</code></pre> <p>Copier template answers to use when generating a project.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>Shared description.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.github_username","title":"github_username  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_username: str | None = None\n</code></pre> <p>GitHub username.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.insiders_namespace","title":"insiders_namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>insiders_namespace: str | None = None\n</code></pre> <p>Namespace of the insiders repository.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.insiders_project_directory","title":"insiders_project_directory  <code>instance-attribute</code>","text":"<pre><code>insiders_project_directory: Path\n</code></pre> <p>Directory in which to clone the insiders repository.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.insiders_repository","title":"insiders_repository  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>insiders_repository: str | None = None\n</code></pre> <p>Name of the insiders repository.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.namespace","title":"namespace  <code>instance-attribute</code>","text":"<pre><code>namespace: str\n</code></pre> <p>Namespace of the public repository.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.post_creation_command","title":"post_creation_command  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>post_creation_command: list[str] | None = None\n</code></pre> <p>Command to run after creating the public repository.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.project_directory","title":"project_directory  <code>instance-attribute</code>","text":"<pre><code>project_directory: Path\n</code></pre> <p>Directory in which to clone the public repository.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.pypi_username","title":"pypi_username  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pypi_username: str | None = None\n</code></pre> <p>PyPI username to register the project with.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.register_on_pypi","title":"register_on_pypi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>register_on_pypi: bool = False\n</code></pre> <p>Whether to register the project on PyPI after creating it.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.repository","title":"repository  <code>instance-attribute</code>","text":"<pre><code>repository: str\n</code></pre> <p>Name of the public repository.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectCreate.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandProjectPyPIRegister","title":"CommandProjectPyPIRegister  <code>dataclass</code>","text":"<pre><code>CommandProjectPyPIRegister(\n    *, username: str, name: str, description: str\n)\n</code></pre> <p>Command to register a project name on PyPI.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the project on PyPI.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name to register.</p> </li> <li> <code>username</code>               (<code>str</code>)           \u2013            <p>Username on PyPI (your account).</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandProjectPyPIRegister.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>Description of the project on PyPI.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectPyPIRegister.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Name to register.</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectPyPIRegister.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre> <p>Username on PyPI (your account).</p>"},{"location":"reference/api/insiders/#insiders.CommandProjectPyPIRegister.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; Any\n</code></pre> <p>Run the command.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsors","title":"CommandSponsors  <code>dataclass</code>","text":"<pre><code>CommandSponsors(\n    *,\n    subcommand: CommandSponsorsList\n    | CommandSponsorsShow\n    | CommandSponsorsTeamList\n    | CommandSponsorsTeamSync,\n)\n</code></pre> <p>Command to manage sponsors.</p> <p>Attributes:</p> <ul> <li> <code>subcommand</code>               (<code>CommandSponsorsList | CommandSponsorsShow | CommandSponsorsTeamList | CommandSponsorsTeamSync</code>)           \u2013            <p>The selected subcommand.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsors.subcommand","title":"subcommand  <code>instance-attribute</code>","text":"<pre><code>subcommand: (\n    CommandSponsorsList\n    | CommandSponsorsShow\n    | CommandSponsorsTeamList\n    | CommandSponsorsTeamSync\n)\n</code></pre> <p>The selected subcommand.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList","title":"CommandSponsorsList  <code>dataclass</code>","text":"<pre><code>CommandSponsorsList(\n    *,\n    github_sponsored_account: str = \"\",\n    include_users: list[str] = list(),\n    exclude_users: list[str] = list(),\n    github_beneficiaries: dict[str, list[str]] = dict(),\n    github_token: str = \"\",\n    polar_sponsored_account: str = \"\",\n    polar_beneficiaries: dict[str, list[str]] = dict(),\n    polar_token: str = \"\",\n    minimum_amount: int = 0,\n    public: bool = False,\n    sponsorships: bool = False,\n)\n</code></pre> <p>Command to list sponsors.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>exclude_users</code>               (<code>list[str]</code>)           \u2013            <p>Users that should never be in the team.</p> </li> <li> <code>github_beneficiaries</code>               (<code>dict[str, list[str]]</code>)           \u2013            <p>Beneficiaries of GitHub sponsors.</p> </li> <li> <code>github_sponsored_account</code>               (<code>str</code>)           \u2013            <p>The sponsored account on GitHub Sponsors.</p> </li> <li> <code>github_token</code>               (<code>str</code>)           \u2013            <p>A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>.</p> </li> <li> <code>include_users</code>               (<code>list[str]</code>)           \u2013            <p>Users that should always be in the team.</p> </li> <li> <code>minimum_amount</code>               (<code>int</code>)           \u2013            <p>Minimum amount to be considered an insider.</p> </li> <li> <code>polar_beneficiaries</code>               (<code>dict[str, list[str]]</code>)           \u2013            <p>Beneficiaries of Polar sponsors.</p> </li> <li> <code>polar_sponsored_account</code>               (<code>str</code>)           \u2013            <p>The sponsored account on Polar.</p> </li> <li> <code>polar_token</code>               (<code>str</code>)           \u2013            <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p> </li> <li> <code>public</code>               (<code>bool</code>)           \u2013            <p>Only use public sponsorships.</p> </li> <li> <code>sponsorships</code>               (<code>bool</code>)           \u2013            <p>List sponsorships rather than users/sponsors.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.exclude_users","title":"exclude_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclude_users: list[str] = field(default_factory=list)\n</code></pre> <p>Users that should never be in the team.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.github_beneficiaries","title":"github_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_beneficiaries: dict[str, list[str]] = field(\n    default_factory=dict\n)\n</code></pre> <p>Beneficiaries of GitHub sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.github_sponsored_account","title":"github_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_sponsored_account: str = ''\n</code></pre> <p>The sponsored account on GitHub Sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.github_token","title":"github_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_token: str = ''\n</code></pre> <p>A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.include_users","title":"include_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_users: list[str] = field(default_factory=list)\n</code></pre> <p>Users that should always be in the team.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.minimum_amount","title":"minimum_amount  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum_amount: int = 0\n</code></pre> <p>Minimum amount to be considered an insider.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.polar_beneficiaries","title":"polar_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_beneficiaries: dict[str, list[str]] = field(\n    default_factory=dict\n)\n</code></pre> <p>Beneficiaries of Polar sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.polar_sponsored_account","title":"polar_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_sponsored_account: str = ''\n</code></pre> <p>The sponsored account on Polar.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.polar_token","title":"polar_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_token: str = ''\n</code></pre> <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.public","title":"public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>public: bool = False\n</code></pre> <p>Only use public sponsorships.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.sponsorships","title":"sponsorships  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsorships: bool = False\n</code></pre> <p>List sponsorships rather than users/sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsList.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow","title":"CommandSponsorsShow  <code>dataclass</code>","text":"<pre><code>CommandSponsorsShow(\n    *,\n    insiders_team: str,\n    github_sponsored_account: str = \"\",\n    include_users: list[str] = list(),\n    exclude_users: list[str] = list(),\n    github_beneficiaries: dict[str, list[str]] = dict(),\n    github_token: str = \"\",\n    polar_sponsored_account: str = \"\",\n    polar_token: str = \"\",\n    minimum_amount: int = 0,\n    dry_run: bool = False,\n)\n</code></pre> <p>Command to show details about a sponsor/user.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>dry_run</code>               (<code>bool</code>)           \u2013            <p>Display the changes that would be made, without making them.</p> </li> <li> <code>exclude_users</code>               (<code>list[str]</code>)           \u2013            <p>Users that should never be in the team.</p> </li> <li> <code>github_beneficiaries</code>               (<code>dict[str, list[str]]</code>)           \u2013            <p>A mapping of users belonging to sponsoring organizations.</p> </li> <li> <code>github_sponsored_account</code>               (<code>str</code>)           \u2013            <p>The sponsored account on GitHub Sponsors.</p> </li> <li> <code>github_token</code>               (<code>str</code>)           \u2013            <p>A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>.</p> </li> <li> <code>include_users</code>               (<code>list[str]</code>)           \u2013            <p>Users that should always be in the team.</p> </li> <li> <code>insiders_team</code>               (<code>str</code>)           \u2013            <p>The GitHub team to sync.</p> </li> <li> <code>minimum_amount</code>               (<code>int</code>)           \u2013            <p>Minimum amount to be considered an insider.</p> </li> <li> <code>polar_sponsored_account</code>               (<code>str</code>)           \u2013            <p>The sponsored account on Polar.</p> </li> <li> <code>polar_token</code>               (<code>str</code>)           \u2013            <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.dry_run","title":"dry_run  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dry_run: bool = False\n</code></pre> <p>Display the changes that would be made, without making them.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.exclude_users","title":"exclude_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclude_users: list[str] = field(default_factory=list)\n</code></pre> <p>Users that should never be in the team.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.github_beneficiaries","title":"github_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_beneficiaries: dict[str, list[str]] = field(\n    default_factory=dict\n)\n</code></pre> <p>A mapping of users belonging to sponsoring organizations.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.github_sponsored_account","title":"github_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_sponsored_account: str = ''\n</code></pre> <p>The sponsored account on GitHub Sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.github_token","title":"github_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_token: str = ''\n</code></pre> <p>A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.include_users","title":"include_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_users: list[str] = field(default_factory=list)\n</code></pre> <p>Users that should always be in the team.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.insiders_team","title":"insiders_team  <code>instance-attribute</code>","text":"<pre><code>insiders_team: str\n</code></pre> <p>The GitHub team to sync.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.minimum_amount","title":"minimum_amount  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum_amount: int = 0\n</code></pre> <p>Minimum amount to be considered an insider.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.polar_sponsored_account","title":"polar_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_sponsored_account: str = ''\n</code></pre> <p>The sponsored account on Polar.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.polar_token","title":"polar_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_token: str = ''\n</code></pre> <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsShow.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamList","title":"CommandSponsorsTeamList  <code>dataclass</code>","text":"<pre><code>CommandSponsorsTeamList()\n</code></pre> <p>Command to list team memberships.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamList.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync","title":"CommandSponsorsTeamSync  <code>dataclass</code>","text":"<pre><code>CommandSponsorsTeamSync(\n    *,\n    insiders_team: str,\n    github_sponsored_account: str = \"\",\n    include_users: list[str] = list(),\n    exclude_users: list[str] = list(),\n    github_beneficiaries: dict[str, list[str]] = dict(),\n    github_token: str = \"\",\n    polar_sponsored_account: str = \"\",\n    polar_beneficiaries: dict[str, list[str]] = dict(),\n    polar_token: str = \"\",\n    minimum_amount: int = 0,\n    dry_run: bool = False,\n)\n</code></pre> <p>Command to sync team memberships with current sponsors.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Run the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>dry_run</code>               (<code>bool</code>)           \u2013            <p>Display the changes that would be made, without making them.</p> </li> <li> <code>exclude_users</code>               (<code>list[str]</code>)           \u2013            <p>Users that should never be in the team.</p> </li> <li> <code>github_beneficiaries</code>               (<code>dict[str, list[str]]</code>)           \u2013            <p>A mapping of users belonging to sponsoring organizations.</p> </li> <li> <code>github_sponsored_account</code>               (<code>str</code>)           \u2013            <p>The sponsored account on GitHub Sponsors.</p> </li> <li> <code>github_token</code>               (<code>str</code>)           \u2013            <p>A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>.</p> </li> <li> <code>include_users</code>               (<code>list[str]</code>)           \u2013            <p>Users that should always be in the team.</p> </li> <li> <code>insiders_team</code>               (<code>str</code>)           \u2013            <p>The GitHub team to sync.</p> </li> <li> <code>minimum_amount</code>               (<code>int</code>)           \u2013            <p>Minimum amount to be considered an insider.</p> </li> <li> <code>polar_beneficiaries</code>               (<code>dict[str, list[str]]</code>)           \u2013            <p>Beneficiaries of Polar sponsors.</p> </li> <li> <code>polar_sponsored_account</code>               (<code>str</code>)           \u2013            <p>The sponsored account on Polar.</p> </li> <li> <code>polar_token</code>               (<code>str</code>)           \u2013            <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.dry_run","title":"dry_run  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dry_run: bool = False\n</code></pre> <p>Display the changes that would be made, without making them.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.exclude_users","title":"exclude_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclude_users: list[str] = field(default_factory=list)\n</code></pre> <p>Users that should never be in the team.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.github_beneficiaries","title":"github_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_beneficiaries: dict[str, list[str]] = field(\n    default_factory=dict\n)\n</code></pre> <p>A mapping of users belonging to sponsoring organizations.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.github_sponsored_account","title":"github_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_sponsored_account: str = ''\n</code></pre> <p>The sponsored account on GitHub Sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.github_token","title":"github_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>github_token: str = ''\n</code></pre> <p>A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.include_users","title":"include_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_users: list[str] = field(default_factory=list)\n</code></pre> <p>Users that should always be in the team.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.insiders_team","title":"insiders_team  <code>instance-attribute</code>","text":"<pre><code>insiders_team: str\n</code></pre> <p>The GitHub team to sync.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.minimum_amount","title":"minimum_amount  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum_amount: int = 0\n</code></pre> <p>Minimum amount to be considered an insider.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.polar_beneficiaries","title":"polar_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_beneficiaries: dict[str, list[str]] = field(\n    default_factory=dict\n)\n</code></pre> <p>Beneficiaries of Polar sponsors.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.polar_sponsored_account","title":"polar_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_sponsored_account: str = ''\n</code></pre> <p>The sponsored account on Polar.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.polar_token","title":"polar_token  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>polar_token: str = ''\n</code></pre> <p>A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p>"},{"location":"reference/api/insiders/#insiders.CommandSponsorsTeamSync.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; int\n</code></pre> <p>Run the command.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Return code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Config","title":"Config  <code>dataclass</code>","text":"<pre><code>Config(\n    *,\n    backlog_namespaces: list[str] | Unset = config_field(\n        \"backlog.namespaces\"\n    ),\n    backlog_sort: list[Callable] | Unset = config_field(\n        \"backlog.sort\", transform=\"_eval_sort\"\n    ),\n    backlog_limit: int | Unset = config_field(\n        \"backlog.limit\"\n    ),\n    backlog_issue_labels: dict[str, str]\n    | Unset = config_field(\"backlog.issue-labels\"),\n    backlog_github_token_command: str\n    | Unset = config_field(\"backlog.github-token-command\"),\n    backlog_polar_token_command: str | Unset = config_field(\n        \"backlog.polar-token-command\"\n    ),\n    index_url: str | Unset = config_field(\"index.url\"),\n    index_start_in_background: bool | Unset = config_field(\n        \"index.start-in-background\"\n    ),\n    index_distributions_directory: str\n    | Unset = config_field(\"index.distributions-directory\"),\n    index_sources_directory: str | Unset = config_field(\n        \"index.sources-directory\"\n    ),\n    index_log_path: str | Unset = config_field(\n        \"index.log-path\"\n    ),\n    project_github_username: str | Unset = config_field(\n        \"project.github-username\"\n    ),\n    project_namespace: str | Unset = config_field(\n        \"project.namespace\"\n    ),\n    project_insiders_namespace: str | Unset = config_field(\n        \"project.insiders-namespace\"\n    ),\n    project_directory: str | Unset = config_field(\n        \"project.directory\"\n    ),\n    project_insiders_directory: str | Unset = config_field(\n        \"project.insiders-directory\"\n    ),\n    project_register_on_pypi: bool | Unset = config_field(\n        \"project.register-on-pypi\"\n    ),\n    project_pypi_username: str | Unset = config_field(\n        \"project.pypi-username\"\n    ),\n    project_post_creation_command: str\n    | list[str]\n    | Unset = config_field(\"project.post-creation-command\"),\n    project_copier_template: str | Unset = config_field(\n        \"project.copier-template\"\n    ),\n    project_copier_template_answers: dict[str, str]\n    | Unset = config_field(\n        \"project.copier-template-answers\"\n    ),\n    sponsors_minimum_amount: int | Unset = config_field(\n        \"sponsors.minimum-amount\"\n    ),\n    sponsors_github_sponsored_account: str\n    | Unset = config_field(\n        \"sponsors.github-sponsored-account\"\n    ),\n    sponsors_github_token_command: str\n    | Unset = config_field(\"sponsors.github-token-command\"),\n    sponsors_github_beneficiaries: dict[str, set[str]]\n    | Unset = config_field(\"sponsors.github-beneficiaries\"),\n    sponsors_polar_sponsored_account: str\n    | Unset = config_field(\n        \"sponsors.polar-sponsored-account\"\n    ),\n    sponsors_polar_token_command: str\n    | Unset = config_field(\"sponsors.polar-token-command\"),\n    sponsors_polar_beneficiaries: dict[str, set[str]]\n    | Unset = config_field(\"sponsors.polar-beneficiaries\"),\n    sponsors_insiders_team: str | Unset = config_field(\n        \"sponsors.insiders-team\"\n    ),\n    sponsors_include_users: set[str] | Unset = config_field(\n        \"sponsors.include-users\"\n    ),\n    sponsors_exclude_users: set[str] | Unset = config_field(\n        \"sponsors.exclude-users\"\n    ),\n)\n</code></pre> <p>Configuration for the insiders project.</p> <p>Methods:</p> <ul> <li> <code>from_default_location</code>             \u2013              <p>Load configuration from the default location.</p> </li> <li> <code>from_file</code>             \u2013              <p>Load configuration from a file.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>backlog_github_token</code>               (<code>str | Unset</code>)           \u2013            <p>Get the GitHub token for backlog operations.</p> </li> <li> <code>backlog_github_token_command</code>               (<code>str | Unset</code>)           \u2013            <p>Command to obtain a GitHub token for the backlog.</p> </li> <li> <code>backlog_issue_labels</code>               (<code>dict[str, str] | Unset</code>)           \u2013            <p>Map of label names to their display value (emojis, typically).</p> </li> <li> <code>backlog_limit</code>               (<code>int | Unset</code>)           \u2013            <p>Limit the number of displayed issues.</p> </li> <li> <code>backlog_namespaces</code>               (<code>list[str] | Unset</code>)           \u2013            <p>GitHub namespaces to fetch issues from.</p> </li> <li> <code>backlog_polar_token</code>               (<code>str | Unset</code>)           \u2013            <p>Get the Polar token for backlog operations.</p> </li> <li> <code>backlog_polar_token_command</code>               (<code>str | Unset</code>)           \u2013            <p>Command to obtain a Polar token for the backlog.</p> </li> <li> <code>backlog_sort</code>               (<code>list[Callable] | Unset</code>)           \u2013            <p>Sort strategies to apply to the backlog.</p> </li> <li> <code>index_distributions_directory</code>               (<code>str | Unset</code>)           \u2013            <p>Directory to store generated Python project distributions.</p> </li> <li> <code>index_log_path</code>               (<code>str | Unset</code>)           \u2013            <p>Where to write the index server logs to.</p> </li> <li> <code>index_sources_directory</code>               (<code>str | Unset</code>)           \u2013            <p>Directory to store project sources (cloned repositories).</p> </li> <li> <code>index_start_in_background</code>               (<code>bool | Unset</code>)           \u2013            <p>Whether to start the index server in the background.</p> </li> <li> <code>index_url</code>               (<code>str | Unset</code>)           \u2013            <p>URL of the index server.</p> </li> <li> <code>project_copier_template</code>               (<code>str | Unset</code>)           \u2013            <p>Copier template to generate new projects with.</p> </li> <li> <code>project_copier_template_answers</code>               (<code>dict[str, str] | Unset</code>)           \u2013            <p>Copier template answers to use when generating a project.</p> </li> <li> <code>project_directory</code>               (<code>str | Unset</code>)           \u2013            <p>Directory in which to clone created public projects.</p> </li> <li> <code>project_github_username</code>               (<code>str | Unset</code>)           \u2013            <p>GitHub username to use for operations.</p> </li> <li> <code>project_insiders_directory</code>               (<code>str | Unset</code>)           \u2013            <p>Directory in which to clone created private projects.</p> </li> <li> <code>project_insiders_namespace</code>               (<code>str | Unset</code>)           \u2013            <p>GitHub namespace to create insiders projects in.</p> </li> <li> <code>project_namespace</code>               (<code>str | Unset</code>)           \u2013            <p>GitHub namespace to create public projects in.</p> </li> <li> <code>project_post_creation_command</code>               (<code>str | list[str] | Unset</code>)           \u2013            <p>Command to run after creating a project.</p> </li> <li> <code>project_pypi_username</code>               (<code>str | Unset</code>)           \u2013            <p>PyPI username to use when registering projects on PyPI.</p> </li> <li> <code>project_register_on_pypi</code>               (<code>bool | Unset</code>)           \u2013            <p>Whether to register new projects on PyPI after creating them.</p> </li> <li> <code>sponsors_exclude_users</code>               (<code>set[str] | Unset</code>)           \u2013            <p>GitHub users to never include in the insiders team (even sponsors).</p> </li> <li> <code>sponsors_github_beneficiaries</code>               (<code>dict[str, set[str]] | Unset</code>)           \u2013            <p>Map of GitHub sponsors to their beneficiaries.</p> </li> <li> <code>sponsors_github_sponsored_account</code>               (<code>str | Unset</code>)           \u2013            <p>GitHub account receiving sponsorships.</p> </li> <li> <code>sponsors_github_token</code>               (<code>str | Unset</code>)           \u2013            <p>Get the GitHub token for sponsors operations.</p> </li> <li> <code>sponsors_github_token_command</code>               (<code>str | Unset</code>)           \u2013            <p>Command to obtain a GitHub token.</p> </li> <li> <code>sponsors_include_users</code>               (<code>set[str] | Unset</code>)           \u2013            <p>GitHub users to always include in the insiders team (even non-sponsors).</p> </li> <li> <code>sponsors_insiders_team</code>               (<code>str | Unset</code>)           \u2013            <p>GitHub team to add insiders to.</p> </li> <li> <code>sponsors_minimum_amount</code>               (<code>int | Unset</code>)           \u2013            <p>Minimum sponsorship amount to be considered an insider.</p> </li> <li> <code>sponsors_polar_beneficiaries</code>               (<code>dict[str, set[str]] | Unset</code>)           \u2013            <p>Map of Polar sponsors to their beneficiaries.</p> </li> <li> <code>sponsors_polar_sponsored_account</code>               (<code>str | Unset</code>)           \u2013            <p>Polar account receiving sponsorships.</p> </li> <li> <code>sponsors_polar_token</code>               (<code>str | Unset</code>)           \u2013            <p>Get the Polar token for sponsors operations.</p> </li> <li> <code>sponsors_polar_token_command</code>               (<code>str | Unset</code>)           \u2013            <p>Command to obtain a Polar token for the sponsors.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Config.backlog_github_token","title":"backlog_github_token  <code>property</code>","text":"<pre><code>backlog_github_token: str | Unset\n</code></pre> <p>Get the GitHub token for backlog operations.</p>"},{"location":"reference/api/insiders/#insiders.Config.backlog_github_token_command","title":"backlog_github_token_command  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlog_github_token_command: str | Unset = config_field(\n    \"backlog.github-token-command\"\n)\n</code></pre> <p>Command to obtain a GitHub token for the backlog.</p>"},{"location":"reference/api/insiders/#insiders.Config.backlog_issue_labels","title":"backlog_issue_labels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlog_issue_labels: dict[str, str] | Unset = config_field(\n    \"backlog.issue-labels\"\n)\n</code></pre> <p>Map of label names to their display value (emojis, typically).</p>"},{"location":"reference/api/insiders/#insiders.Config.backlog_limit","title":"backlog_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlog_limit: int | Unset = config_field('backlog.limit')\n</code></pre> <p>Limit the number of displayed issues.</p>"},{"location":"reference/api/insiders/#insiders.Config.backlog_namespaces","title":"backlog_namespaces  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlog_namespaces: list[str] | Unset = config_field(\n    \"backlog.namespaces\"\n)\n</code></pre> <p>GitHub namespaces to fetch issues from.</p>"},{"location":"reference/api/insiders/#insiders.Config.backlog_polar_token","title":"backlog_polar_token  <code>property</code>","text":"<pre><code>backlog_polar_token: str | Unset\n</code></pre> <p>Get the Polar token for backlog operations.</p>"},{"location":"reference/api/insiders/#insiders.Config.backlog_polar_token_command","title":"backlog_polar_token_command  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlog_polar_token_command: str | Unset = config_field(\n    \"backlog.polar-token-command\"\n)\n</code></pre> <p>Command to obtain a Polar token for the backlog.</p>"},{"location":"reference/api/insiders/#insiders.Config.backlog_sort","title":"backlog_sort  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlog_sort: list[Callable] | Unset = config_field(\n    \"backlog.sort\", transform=\"_eval_sort\"\n)\n</code></pre> <p>Sort strategies to apply to the backlog.</p>"},{"location":"reference/api/insiders/#insiders.Config.index_distributions_directory","title":"index_distributions_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>index_distributions_directory: str | Unset = config_field(\n    \"index.distributions-directory\"\n)\n</code></pre> <p>Directory to store generated Python project distributions.</p>"},{"location":"reference/api/insiders/#insiders.Config.index_log_path","title":"index_log_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>index_log_path: str | Unset = config_field(\"index.log-path\")\n</code></pre> <p>Where to write the index server logs to.</p>"},{"location":"reference/api/insiders/#insiders.Config.index_sources_directory","title":"index_sources_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>index_sources_directory: str | Unset = config_field(\n    \"index.sources-directory\"\n)\n</code></pre> <p>Directory to store project sources (cloned repositories).</p>"},{"location":"reference/api/insiders/#insiders.Config.index_start_in_background","title":"index_start_in_background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>index_start_in_background: bool | Unset = config_field(\n    \"index.start-in-background\"\n)\n</code></pre> <p>Whether to start the index server in the background.</p>"},{"location":"reference/api/insiders/#insiders.Config.index_url","title":"index_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>index_url: str | Unset = config_field('index.url')\n</code></pre> <p>URL of the index server.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_copier_template","title":"project_copier_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_copier_template: str | Unset = config_field(\n    \"project.copier-template\"\n)\n</code></pre> <p>Copier template to generate new projects with.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_copier_template_answers","title":"project_copier_template_answers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_copier_template_answers: dict[str, str] | Unset = (\n    config_field(\"project.copier-template-answers\")\n)\n</code></pre> <p>Copier template answers to use when generating a project.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_directory","title":"project_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_directory: str | Unset = config_field(\n    \"project.directory\"\n)\n</code></pre> <p>Directory in which to clone created public projects.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_github_username","title":"project_github_username  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_github_username: str | Unset = config_field(\n    \"project.github-username\"\n)\n</code></pre> <p>GitHub username to use for operations.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_insiders_directory","title":"project_insiders_directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_insiders_directory: str | Unset = config_field(\n    \"project.insiders-directory\"\n)\n</code></pre> <p>Directory in which to clone created private projects.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_insiders_namespace","title":"project_insiders_namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_insiders_namespace: str | Unset = config_field(\n    \"project.insiders-namespace\"\n)\n</code></pre> <p>GitHub namespace to create insiders projects in.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_namespace","title":"project_namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_namespace: str | Unset = config_field(\n    \"project.namespace\"\n)\n</code></pre> <p>GitHub namespace to create public projects in.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_post_creation_command","title":"project_post_creation_command  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_post_creation_command: str | list[str] | Unset = (\n    config_field(\"project.post-creation-command\")\n)\n</code></pre> <p>Command to run after creating a project.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_pypi_username","title":"project_pypi_username  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_pypi_username: str | Unset = config_field(\n    \"project.pypi-username\"\n)\n</code></pre> <p>PyPI username to use when registering projects on PyPI.</p>"},{"location":"reference/api/insiders/#insiders.Config.project_register_on_pypi","title":"project_register_on_pypi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project_register_on_pypi: bool | Unset = config_field(\n    \"project.register-on-pypi\"\n)\n</code></pre> <p>Whether to register new projects on PyPI after creating them.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_exclude_users","title":"sponsors_exclude_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_exclude_users: set[str] | Unset = config_field(\n    \"sponsors.exclude-users\"\n)\n</code></pre> <p>GitHub users to never include in the insiders team (even sponsors).</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_github_beneficiaries","title":"sponsors_github_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_github_beneficiaries: (\n    dict[str, set[str]] | Unset\n) = config_field(\"sponsors.github-beneficiaries\")\n</code></pre> <p>Map of GitHub sponsors to their beneficiaries.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_github_sponsored_account","title":"sponsors_github_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_github_sponsored_account: str | Unset = (\n    config_field(\"sponsors.github-sponsored-account\")\n)\n</code></pre> <p>GitHub account receiving sponsorships.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_github_token","title":"sponsors_github_token  <code>property</code>","text":"<pre><code>sponsors_github_token: str | Unset\n</code></pre> <p>Get the GitHub token for sponsors operations.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_github_token_command","title":"sponsors_github_token_command  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_github_token_command: str | Unset = config_field(\n    \"sponsors.github-token-command\"\n)\n</code></pre> <p>Command to obtain a GitHub token.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_include_users","title":"sponsors_include_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_include_users: set[str] | Unset = config_field(\n    \"sponsors.include-users\"\n)\n</code></pre> <p>GitHub users to always include in the insiders team (even non-sponsors).</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_insiders_team","title":"sponsors_insiders_team  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_insiders_team: str | Unset = config_field(\n    \"sponsors.insiders-team\"\n)\n</code></pre> <p>GitHub team to add insiders to.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_minimum_amount","title":"sponsors_minimum_amount  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_minimum_amount: int | Unset = config_field(\n    \"sponsors.minimum-amount\"\n)\n</code></pre> <p>Minimum sponsorship amount to be considered an insider.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_polar_beneficiaries","title":"sponsors_polar_beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_polar_beneficiaries: (\n    dict[str, set[str]] | Unset\n) = config_field(\"sponsors.polar-beneficiaries\")\n</code></pre> <p>Map of Polar sponsors to their beneficiaries.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_polar_sponsored_account","title":"sponsors_polar_sponsored_account  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_polar_sponsored_account: str | Unset = (\n    config_field(\"sponsors.polar-sponsored-account\")\n)\n</code></pre> <p>Polar account receiving sponsorships.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_polar_token","title":"sponsors_polar_token  <code>property</code>","text":"<pre><code>sponsors_polar_token: str | Unset\n</code></pre> <p>Get the Polar token for sponsors operations.</p>"},{"location":"reference/api/insiders/#insiders.Config.sponsors_polar_token_command","title":"sponsors_polar_token_command  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsors_polar_token_command: str | Unset = config_field(\n    \"sponsors.polar-token-command\"\n)\n</code></pre> <p>Command to obtain a Polar token for the sponsors.</p>"},{"location":"reference/api/insiders/#insiders.Config.from_default_location","title":"from_default_location  <code>classmethod</code>","text":"<pre><code>from_default_location() -&gt; Config\n</code></pre> <p>Load configuration from the default location.</p>"},{"location":"reference/api/insiders/#insiders.Config.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(path: str | Path) -&gt; Config\n</code></pre> <p>Load configuration from a file.</p>"},{"location":"reference/api/insiders/#insiders.GitHub","title":"GitHub","text":"<pre><code>GitHub(token: str)\n</code></pre> <p>               Bases: <code>_Client</code></p> <p>GitHub client.</p> <p>Initialize GitHub API client.</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>consolidate_beneficiaries</code>             \u2013              <p>Consolidate beneficiaries from sponsors data.</p> </li> <li> <code>create_repo</code>             \u2013              <p>Create a repository.</p> </li> <li> <code>get_failed_invites</code>             \u2013              </li> <li> <code>get_issues</code>             \u2013              <p>Get issues from GitHub.</p> </li> <li> <code>get_org_members</code>             \u2013              <p>Get organization members (username only).</p> </li> <li> <code>get_sponsors</code>             \u2013              <p>Get GitHub sponsors.</p> </li> <li> <code>get_team_invites</code>             \u2013              <p>Get pending invitations to a GitHub team.</p> </li> <li> <code>get_team_members</code>             \u2013              <p>Get members of a GitHub team.</p> </li> <li> <code>grant_access</code>             \u2013              <p>Grant access to a user to a GitHub team.</p> </li> <li> <code>is_org</code>             \u2013              <p>Check if an account is an organization.</p> </li> <li> <code>revoke_access</code>             \u2013              <p>Revoke access from a user to a GitHub team.</p> </li> <li> <code>sync_team</code>             \u2013              <p>Sync sponsors with members of a GitHub team.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>http_client</code>               (<code>Client</code>)           \u2013            <p>HTTP client.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the client.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.http_client","title":"http_client  <code>instance-attribute</code>","text":"<pre><code>http_client: Client = Client(\n    base_url=\"https://api.github.com\",\n    headers={\"Authorization\": f\"Bearer {token}\"},\n)\n</code></pre> <p>HTTP client.</p>"},{"location":"reference/api/insiders/#insiders.GitHub.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = 'GitHub'\n</code></pre> <p>The name of the client.</p>"},{"location":"reference/api/insiders/#insiders.GitHub.consolidate_beneficiaries","title":"consolidate_beneficiaries","text":"<pre><code>consolidate_beneficiaries(\n    sponsors: Sponsors,\n    beneficiaries: Mapping[\n        str,\n        Mapping[\n            str, Iterable[str | Mapping[str, str | bool]]\n        ],\n    ],\n) -&gt; None\n</code></pre> <p>Consolidate beneficiaries from sponsors data.</p> <p>Parameters:</p> <ul> <li> <code>sponsors</code>               (<code>Sponsors</code>)           \u2013            <p>Sponsors data.</p> </li> <li> <code>beneficiaries</code>               (<code>Mapping[str, Mapping[str, Iterable[str | Mapping[str, str | bool]]]]</code>)           \u2013            <p>Beneficiaries data. It's a mapping of platform to account name to a list of beneficiaries.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.create_repo","title":"create_repo","text":"<pre><code>create_repo(\n    repository: str,\n    *,\n    description: str | None = None,\n    homepage: str | None = None,\n    private: bool = False,\n    has_issues: bool = False,\n    has_projects: bool = False,\n    has_wiki: bool = False,\n    has_discussions: bool = False,\n) -&gt; None\n</code></pre> <p>Create a repository.</p> <p>Parameters:</p> <ul> <li> <code>repository</code>               (<code>str</code>)           \u2013            <p>The repository, like <code>namespace/repo</code>.</p> </li> <li> <code>description</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The repository description.</p> </li> <li> <code>homepage</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The repository homepage.</p> </li> <li> <code>private</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the repository is private.</p> </li> <li> <code>has_issues</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable issues.</p> </li> <li> <code>has_projects</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable projects.</p> </li> <li> <code>has_wiki</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable the wiki.</p> </li> <li> <code>has_discussions</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable discussions.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.get_failed_invites","title":"get_failed_invites","text":"<pre><code>get_failed_invites(org: str) -&gt; set[str]\n</code></pre> <p>Parameters:</p> <ul> <li> <code>org</code>               (<code>str</code>)           \u2013            <p>The organization name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>set[str]</code>           \u2013            <p>A set of member names.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.get_issues","title":"get_issues","text":"<pre><code>get_issues(\n    github_accounts: Iterable[str],\n    known_github_users: Iterable[Account] | None = None,\n    *,\n    allow_labels: set[str] | None = None,\n) -&gt; dict[tuple[str, str], Issue]\n</code></pre> <p>Get issues from GitHub.</p> <p>Parameters:</p> <ul> <li> <code>github_accounts</code>               (<code>Iterable[str]</code>)           \u2013            <p>A list of GitHub account names.</p> </li> <li> <code>known_github_users</code>               (<code>Iterable[Account] | None</code>, default:                   <code>None</code> )           \u2013            <p>Known user accounts.</p> </li> <li> <code>allow_labels</code>               (<code>set[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A set of labels to keep.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[tuple[str, str], Issue]</code>           \u2013            <p>A dictionary of issues.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.get_org_members","title":"get_org_members","text":"<pre><code>get_org_members(org: str) -&gt; set[str]\n</code></pre> <p>Get organization members (username only).</p> <p>Parameters:</p> <ul> <li> <code>org</code>               (<code>str</code>)           \u2013            <p>The organization name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>set[str]</code>           \u2013            <p>A set of member names.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.get_sponsors","title":"get_sponsors","text":"<pre><code>get_sponsors(*, exclude_private: bool = False) -&gt; Sponsors\n</code></pre> <p>Get GitHub sponsors.</p> <p>Returns:</p> <ul> <li> <code>Sponsors</code>           \u2013            <p>Sponsors data.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.get_team_invites","title":"get_team_invites","text":"<pre><code>get_team_invites(org: str, team: str) -&gt; set[str]\n</code></pre> <p>Get pending invitations to a GitHub team.</p> <p>Parameters:</p> <ul> <li> <code>org</code>               (<code>str</code>)           \u2013            <p>The organization name.</p> </li> <li> <code>team</code>               (<code>str</code>)           \u2013            <p>The team name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>set[str]</code>           \u2013            <p>A set of member names.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.get_team_members","title":"get_team_members","text":"<pre><code>get_team_members(org: str, team: str) -&gt; set[str]\n</code></pre> <p>Get members of a GitHub team.</p> <p>Parameters:</p> <ul> <li> <code>org</code>               (<code>str</code>)           \u2013            <p>The organization name.</p> </li> <li> <code>team</code>               (<code>str</code>)           \u2013            <p>The team name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>set[str]</code>           \u2013            <p>A set of member names.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.grant_access","title":"grant_access","text":"<pre><code>grant_access(user: str, org: str, team: str) -&gt; None\n</code></pre> <p>Grant access to a user to a GitHub team.</p> <p>Parameters:</p> <ul> <li> <code>user</code>               (<code>str</code>)           \u2013            <p>A username.</p> </li> <li> <code>org</code>               (<code>str</code>)           \u2013            <p>An organization name.</p> </li> <li> <code>team</code>               (<code>str</code>)           \u2013            <p>A team name.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.is_org","title":"is_org","text":"<pre><code>is_org(account: str) -&gt; bool\n</code></pre> <p>Check if an account is an organization.</p> <p>Parameters:</p> <ul> <li> <code>account</code>               (<code>str</code>)           \u2013            <p>An account name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the account is an organization.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.revoke_access","title":"revoke_access","text":"<pre><code>revoke_access(user: str, org: str, team: str) -&gt; None\n</code></pre> <p>Revoke access from a user to a GitHub team.</p> <p>Parameters:</p> <ul> <li> <code>user</code>               (<code>str</code>)           \u2013            <p>A username.</p> </li> <li> <code>org</code>               (<code>str</code>)           \u2013            <p>An organization name.</p> </li> <li> <code>team</code>               (<code>str</code>)           \u2013            <p>A team name.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.GitHub.sync_team","title":"sync_team","text":"<pre><code>sync_team(\n    team: str,\n    *,\n    sponsors: Sponsors | None = None,\n    min_amount: int | None = None,\n    include_users: set[str] | None = None,\n    exclude_users: set[str] | None = None,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Sync sponsors with members of a GitHub team.</p> <p>Parameters:</p> <ul> <li> <code>team</code>               (<code>str</code>)           \u2013            <p>GitHub team to sync sponsors with.</p> </li> <li> <code>sponsors</code>               (<code>Sponsors | None</code>, default:                   <code>None</code> )           \u2013            <p>Sponsors data.</p> </li> <li> <code>min_amount</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Minimum amount to be considered a sponsor.</p> </li> <li> <code>include_users</code>               (<code>set[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Users to always grant access to.</p> </li> <li> <code>exclude_users</code>               (<code>set[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Users to never grant access to.</p> </li> <li> <code>dry_run</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Display changes without applying them.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Index","title":"Index","text":"<pre><code>Index(\n    url: str = DEFAULT_INDEX_URL,\n    git_dir: Path = DEFAULT_REPO_DIR,\n    dist_dir: Path = DEFAULT_DIST_DIR,\n)\n</code></pre> <p>Index of repositories.</p> <p>Initialize the index.</p> <p>Parameters:     conf_path: The path to the configuration file.</p> <p>Methods:</p> <ul> <li> <code>add</code>             \u2013              <p>Add a repository to the index.</p> </li> <li> <code>exists</code>             \u2013              <p>Tell if a package version exists.</p> </li> <li> <code>latest</code>             \u2013              <p>Get the latest version of a package.</p> </li> <li> <code>list_distributions</code>             \u2013              <p>List the distributions in the index.</p> </li> <li> <code>list_projects</code>             \u2013              <p>List the projects in the index.</p> </li> <li> <code>logs</code>             \u2013              <p>Return the logs file path.</p> </li> <li> <code>remove</code>             \u2013              <p>Remove a repository from the index.</p> </li> <li> <code>start</code>             \u2013              <p>Start the server.</p> </li> <li> <code>status</code>             \u2013              <p>Return the server status as a dict of metadata.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop the server.</p> </li> <li> <code>update</code>             \u2013              <p>Update PyPI packages.</p> </li> <li> <code>upload</code>             \u2013              <p>Upload distributions.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>dist_dir</code>               (<code>Path</code>)           \u2013            <p>The directory in which to store the distributions.</p> </li> <li> <code>git_dir</code>               (<code>Path</code>)           \u2013            <p>The directory in which to clone the repositories.</p> </li> <li> <code>port</code>               (<code>int</code>)           \u2013            <p>The port of the index server.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>The URL of the index.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Index.dist_dir","title":"dist_dir  <code>instance-attribute</code>","text":"<pre><code>dist_dir: Path = dist_dir\n</code></pre> <p>The directory in which to store the distributions.</p>"},{"location":"reference/api/insiders/#insiders.Index.git_dir","title":"git_dir  <code>instance-attribute</code>","text":"<pre><code>git_dir: Path = git_dir\n</code></pre> <p>The directory in which to clone the repositories.</p>"},{"location":"reference/api/insiders/#insiders.Index.port","title":"port  <code>instance-attribute</code>","text":"<pre><code>port: int = port or 80\n</code></pre> <p>The port of the index server.</p>"},{"location":"reference/api/insiders/#insiders.Index.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str = url\n</code></pre> <p>The URL of the index.</p>"},{"location":"reference/api/insiders/#insiders.Index.add","title":"add","text":"<pre><code>add(git_url: str, repo: str | None = None) -&gt; None\n</code></pre> <p>Add a repository to the index.</p>"},{"location":"reference/api/insiders/#insiders.Index.exists","title":"exists","text":"<pre><code>exists(name: str, version: str) -&gt; bool\n</code></pre> <p>Tell if a package version exists.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The package name (distribution name).</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>The package version.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the package version exists or not.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Index.latest","title":"latest","text":"<pre><code>latest(name: str) -&gt; str | None\n</code></pre> <p>Get the latest version of a package.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The package name (distribution name).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The version as a string, or none.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Index.list_distributions","title":"list_distributions","text":"<pre><code>list_distributions() -&gt; Iterator[Path]\n</code></pre> <p>List the distributions in the index.</p>"},{"location":"reference/api/insiders/#insiders.Index.list_projects","title":"list_projects","text":"<pre><code>list_projects() -&gt; Iterator[Path]\n</code></pre> <p>List the projects in the index.</p>"},{"location":"reference/api/insiders/#insiders.Index.logs","title":"logs","text":"<pre><code>logs() -&gt; str\n</code></pre> <p>Return the logs file path.</p>"},{"location":"reference/api/insiders/#insiders.Index.remove","title":"remove","text":"<pre><code>remove(repo: str) -&gt; None\n</code></pre> <p>Remove a repository from the index.</p>"},{"location":"reference/api/insiders/#insiders.Index.start","title":"start","text":"<pre><code>start(\n    *, background: bool = False, log_path: str | None = None\n) -&gt; None\n</code></pre> <p>Start the server.</p>"},{"location":"reference/api/insiders/#insiders.Index.status","title":"status","text":"<pre><code>status() -&gt; dict | None\n</code></pre> <p>Return the server status as a dict of metadata.</p> <p>Returns:</p> <ul> <li> <code>dict | None</code>           \u2013            <p>Some metadata about the server process.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Index.stop","title":"stop","text":"<pre><code>stop() -&gt; bool\n</code></pre> <p>Stop the server.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the server was stopped or not.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Index.update","title":"update","text":"<pre><code>update(projects: Iterable[str] | None = None) -&gt; None\n</code></pre> <p>Update PyPI packages.</p> <p>For each configured repository, pull latest contents, checkout latest tag, and if the corresponding version is not present on the index, build and upload distributions.</p>"},{"location":"reference/api/insiders/#insiders.Index.upload","title":"upload","text":"<pre><code>upload(dists: Iterable[str | Path]) -&gt; None\n</code></pre> <p>Upload distributions.</p> <p>Parameters:</p> <ul> <li> <code>dists</code>               (<code>Iterable[str | Path]</code>)           \u2013            <p>The distributions to upload.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Issue","title":"Issue  <code>dataclass</code>","text":"<pre><code>Issue(\n    *,\n    repository: str,\n    number: int,\n    title: str,\n    created: datetime,\n    author: Account,\n    upvotes: set[Account] = set(),\n    labels: set[str] = set(),\n)\n</code></pre> <p>An issue.</p> <p>Attributes:</p> <ul> <li> <code>author</code>               (<code>Account</code>)           \u2013            <p>The issue author.</p> </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            <p>The issue creation date.</p> </li> <li> <code>funding</code>               (<code>int</code>)           \u2013            <p>Total funding for the issue.</p> </li> <li> <code>interested_users</code>               (<code>set[Account]</code>)           \u2013            <p>Author and upvoters.</p> </li> <li> <code>labels</code>               (<code>set[str]</code>)           \u2013            <p>The issue labels.</p> </li> <li> <code>number</code>               (<code>int</code>)           \u2013            <p>The issue number.</p> </li> <li> <code>repository</code>               (<code>str</code>)           \u2013            <p>The issue repository.</p> </li> <li> <code>sponsorships</code>               (<code>set[Sponsorship]</code>)           \u2013            <p>Sponsorships associated with the issue.</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The issue title.</p> </li> <li> <code>upvotes</code>               (<code>set[Account]</code>)           \u2013            <p>The issue upvotes / upvoters.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Issue.author","title":"author  <code>instance-attribute</code>","text":"<pre><code>author: Account\n</code></pre> <p>The issue author.</p>"},{"location":"reference/api/insiders/#insiders.Issue.created","title":"created  <code>instance-attribute</code>","text":"<pre><code>created: datetime\n</code></pre> <p>The issue creation date.</p>"},{"location":"reference/api/insiders/#insiders.Issue.funding","title":"funding  <code>property</code>","text":"<pre><code>funding: int\n</code></pre> <p>Total funding for the issue.</p>"},{"location":"reference/api/insiders/#insiders.Issue.interested_users","title":"interested_users  <code>property</code>","text":"<pre><code>interested_users: set[Account]\n</code></pre> <p>Author and upvoters.</p>"},{"location":"reference/api/insiders/#insiders.Issue.labels","title":"labels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>labels: set[str] = field(default_factory=set)\n</code></pre> <p>The issue labels.</p>"},{"location":"reference/api/insiders/#insiders.Issue.number","title":"number  <code>instance-attribute</code>","text":"<pre><code>number: int\n</code></pre> <p>The issue number.</p>"},{"location":"reference/api/insiders/#insiders.Issue.repository","title":"repository  <code>instance-attribute</code>","text":"<pre><code>repository: str\n</code></pre> <p>The issue repository.</p>"},{"location":"reference/api/insiders/#insiders.Issue.sponsorships","title":"sponsorships  <code>property</code>","text":"<pre><code>sponsorships: set[Sponsorship]\n</code></pre> <p>Sponsorships associated with the issue.</p>"},{"location":"reference/api/insiders/#insiders.Issue.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The issue title.</p>"},{"location":"reference/api/insiders/#insiders.Issue.upvotes","title":"upvotes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>upvotes: set[Account] = field(default_factory=set)\n</code></pre> <p>The issue upvotes / upvoters.</p>"},{"location":"reference/api/insiders/#insiders.Polar","title":"Polar","text":"<pre><code>Polar(token: str)\n</code></pre> <p>               Bases: <code>_Client</code></p> <p>Polar client.</p> <p>Initialize Polar API client.</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>A Polar API token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_sponsors</code>             \u2013              <p>Get Polar sponsorships.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>http_client</code>               (<code>Client</code>)           \u2013            <p>HTTP client.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Client name.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Polar.http_client","title":"http_client  <code>instance-attribute</code>","text":"<pre><code>http_client: Client = Client(\n    base_url=\"https://api.polar.sh\",\n    headers={\n        \"Accept\": \"application/json\",\n        \"Authorization\": f\"Bearer {token}\",\n    },\n)\n</code></pre> <p>HTTP client.</p>"},{"location":"reference/api/insiders/#insiders.Polar.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = 'Polar'\n</code></pre> <p>Client name.</p>"},{"location":"reference/api/insiders/#insiders.Polar.get_sponsors","title":"get_sponsors","text":"<pre><code>get_sponsors(*, exclude_private: bool = False) -&gt; Sponsors\n</code></pre> <p>Get Polar sponsorships.</p> <p>Returns:</p> <ul> <li> <code>Sponsors</code>           \u2013            <p>Sponsors data.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Sponsors","title":"Sponsors  <code>dataclass</code>","text":"<pre><code>Sponsors(*, sponsorships: list[Sponsorship] = list())\n</code></pre> <p>Wrapper class for sponsorships.</p> <p>Methods:</p> <ul> <li> <code>__add__</code>             \u2013              <p>Combine two Sponsors instances into a new one.</p> </li> <li> <code>__iadd__</code>             \u2013              <p>Merge a second Sponsors instance into the current one.</p> </li> <li> <code>merge</code>             \u2013              <p>Merge a second Sponsors instance into the current one.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>accounts</code>               (<code>set[Account]</code>)           \u2013            <p>Set of accounts who created sponsorships.</p> </li> <li> <code>beneficiaries</code>               (<code>dict[str, Beneficiary]</code>)           \u2013            <p>Beneficiaries of all sponsorships.</p> </li> <li> <code>sponsorships</code>               (<code>list[Sponsorship]</code>)           \u2013            <p>Sponsorships.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Sponsors.accounts","title":"accounts  <code>property</code>","text":"<pre><code>accounts: set[Account]\n</code></pre> <p>Set of accounts who created sponsorships.</p>"},{"location":"reference/api/insiders/#insiders.Sponsors.beneficiaries","title":"beneficiaries  <code>property</code>","text":"<pre><code>beneficiaries: dict[str, Beneficiary]\n</code></pre> <p>Beneficiaries of all sponsorships.</p>"},{"location":"reference/api/insiders/#insiders.Sponsors.sponsorships","title":"sponsorships  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sponsorships: list[Sponsorship] = field(\n    default_factory=list\n)\n</code></pre> <p>Sponsorships.</p>"},{"location":"reference/api/insiders/#insiders.Sponsors.__add__","title":"__add__","text":"<pre><code>__add__(other: Sponsors) -&gt; Sponsors\n</code></pre> <p>Combine two Sponsors instances into a new one.</p>"},{"location":"reference/api/insiders/#insiders.Sponsors.__iadd__","title":"__iadd__","text":"<pre><code>__iadd__(other: Sponsors) -&gt; Self\n</code></pre> <p>Merge a second Sponsors instance into the current one.</p>"},{"location":"reference/api/insiders/#insiders.Sponsors.merge","title":"merge","text":"<pre><code>merge(other: Sponsors) -&gt; Self\n</code></pre> <p>Merge a second Sponsors instance into the current one.</p>"},{"location":"reference/api/insiders/#insiders.Sponsorship","title":"Sponsorship  <code>dataclass</code>","text":"<pre><code>Sponsorship(\n    *,\n    private: bool = True,\n    created: datetime,\n    amount: int,\n    account: Account,\n    beneficiaries: dict[str, Beneficiary] = dict(),\n)\n</code></pre> <p>A sponsorship.</p> <p>Attributes:</p> <ul> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>The account who created the sponsorship</p> </li> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount of the sponsorship</p> </li> <li> <code>beneficiaries</code>               (<code>dict[str, Beneficiary]</code>)           \u2013            <p>Beneficiaries of this sponsorship.</p> </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            <p>The creation date of the sponsorship</p> </li> <li> <code>private</code>               (<code>bool</code>)           \u2013            <p>Indicates if the sponsorship is private</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Sponsorship.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>The account who created the sponsorship</p>"},{"location":"reference/api/insiders/#insiders.Sponsorship.amount","title":"amount  <code>instance-attribute</code>","text":"<pre><code>amount: int\n</code></pre> <p>The amount of the sponsorship</p>"},{"location":"reference/api/insiders/#insiders.Sponsorship.beneficiaries","title":"beneficiaries  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>beneficiaries: dict[str, Beneficiary] = field(\n    default_factory=dict\n)\n</code></pre> <p>Beneficiaries of this sponsorship.</p>"},{"location":"reference/api/insiders/#insiders.Sponsorship.created","title":"created  <code>instance-attribute</code>","text":"<pre><code>created: datetime\n</code></pre> <p>The creation date of the sponsorship</p>"},{"location":"reference/api/insiders/#insiders.Sponsorship.private","title":"private  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>private: bool = True\n</code></pre> <p>Indicates if the sponsorship is private</p>"},{"location":"reference/api/insiders/#insiders.Unset","title":"Unset","text":"<pre><code>Unset(key: str, transform: str | None = None)\n</code></pre> <p>A sentinel value for unset configuration options.</p> <p>Attributes:</p> <ul> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>TOML key.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Config variable name.</p> </li> <li> <code>transform</code>               (<code>str | None</code>)           \u2013            <p>Name of the method to call to transform the config value.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.Unset.key","title":"key  <code>instance-attribute</code>","text":"<pre><code>key: str = key\n</code></pre> <p>TOML key.</p>"},{"location":"reference/api/insiders/#insiders.Unset.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = replace('.', '_')\n</code></pre> <p>Config variable name.</p>"},{"location":"reference/api/insiders/#insiders.Unset.transform","title":"transform  <code>instance-attribute</code>","text":"<pre><code>transform: str | None = transform\n</code></pre> <p>Name of the method to call to transform the config value.</p>"},{"location":"reference/api/insiders/#insiders.config_field","title":"config_field","text":"<pre><code>config_field(\n    key: str, transform: str | None = None\n) -&gt; Unset\n</code></pre> <p>Get a dataclass field with a TOML key.</p>"},{"location":"reference/api/insiders/#insiders.get_backlog","title":"get_backlog","text":"<pre><code>get_backlog(\n    github_namespaces: list[str],\n    github: GitHub,\n    sponsors: Sponsors | None = None,\n    issue_labels: set[str] | None = None,\n) -&gt; Backlog\n</code></pre> <p>Get the backlog.</p>"},{"location":"reference/api/insiders/#insiders.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>insiders</code> or <code>python -m insiders</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An exit code.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.new_public_and_insiders_github_projects","title":"new_public_and_insiders_github_projects","text":"<pre><code>new_public_and_insiders_github_projects(\n    *,\n    public_namespace: str,\n    public_name: str,\n    description: str,\n    public_repo_path: str | Path,\n    insiders_namespace: str | None = None,\n    insiders_name: str | None = None,\n    insiders_repo_path: str | Path,\n    github_username: str | None = None,\n    copier_template: str | None = None,\n    copier_template_answers: dict[str, Any] | None = None,\n    post_creation_command: str | list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Create a new Insiders project on GitHub (public and private repositories).</p> <p>Parameters:</p> <ul> <li> <code>public_namespace</code>               (<code>str</code>)           \u2013            <p>Namespace of the public repository.</p> </li> <li> <code>public_name</code>               (<code>str</code>)           \u2013            <p>Name of the public repository.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Shared description.</p> </li> <li> <code>public_repo_path</code>               (<code>str | Path</code>)           \u2013            <p>Local path in which to clone the public repository.</p> </li> <li> <code>insiders_namespace</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Namespace of the insiders repository. Defaults to the public namespace.</p> </li> <li> <code>insiders_name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of the insiders repository. Defaults to the public name.</p> </li> <li> <code>insiders_repo_path</code>               (<code>str | Path</code>)           \u2013            <p>Local path in which to clone the insiders repository.</p> </li> <li> <code>github_username</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Username. Defaults to the public namespace value.</p> </li> <li> <code>copier_template</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Copier template to initialize the local insiders repository with.</p> </li> <li> <code>copier_template_answers</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Answers to the Copier template questions.</p> </li> <li> <code>post_creation_command</code>               (<code>str | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Command to run after creating the public repository.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.print_backlog","title":"print_backlog","text":"<pre><code>print_backlog(\n    backlog: Backlog,\n    labels: dict[str, str] | None = None,\n    limit: int = 0,\n) -&gt; None\n</code></pre> <p>Print the backlog.</p> <p>Parameters:</p> <ul> <li> <code>backlog</code>               (<code>Backlog</code>)           \u2013            <p>The backlog to print.</p> </li> <li> <code>labels</code>               (<code>dict[str, str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A map of label representations.</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The maximum number of issues to print.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.print_sponsors","title":"print_sponsors","text":"<pre><code>print_sponsors(\n    sponsors: Sponsors,\n    min_amount: int,\n    limit: int = 0,\n    *,\n    sponsorships: bool = False,\n) -&gt; None\n</code></pre> <p>Print the sponsors/sponsorships.</p> <p>Parameters:</p> <ul> <li> <code>sponsors</code>               (<code>Sponsors</code>)           \u2013            <p>The sponsors to print.</p> </li> <li> <code>min_amount</code>               (<code>int</code>)           \u2013            <p>The minimum amount for a sponsor to become an Insiders.</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The maximum number of issues to print.</p> </li> <li> <code>sponsorships</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to print the sponsorships as main column.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.reserve_pypi","title":"reserve_pypi","text":"<pre><code>reserve_pypi(\n    username: str, name: str, description: str\n) -&gt; None\n</code></pre> <p>Reserve a name on PyPI.</p> <p>Parameters:</p> <ul> <li> <code>username</code>               (<code>str</code>)           \u2013            <p>Username on PyPI.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name to reserve.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the project on PyPI.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.update_numbers_file","title":"update_numbers_file","text":"<pre><code>update_numbers_file(\n    sponsorships: list[Sponsorship],\n    filepath: Path = Path(\"numbers.json\"),\n) -&gt; None\n</code></pre> <p>Update the file storing sponsorship numbers.</p> <p>Parameters:</p> <ul> <li> <code>sponsorships</code>               (<code>list[Sponsorship]</code>)           \u2013            <p>List of sponsorships.</p> </li> <li> <code>filepath</code>               (<code>Path</code>, default:                   <code>Path('numbers.json')</code> )           \u2013            <p>File-path to update.</p> </li> </ul>"},{"location":"reference/api/insiders/#insiders.update_sponsors_file","title":"update_sponsors_file","text":"<pre><code>update_sponsors_file(\n    sponsorships: list[Sponsorship],\n    filepath: Path = Path(\"sponsors.json\"),\n    *,\n    exclude_private: bool = True,\n) -&gt; None\n</code></pre> <p>Update the file storing sponsors info.</p> <p>Parameters:</p> <ul> <li> <code>sponsorships</code>               (<code>list[Sponsorship]</code>)           \u2013            <p>List of sponsorships.</p> </li> <li> <code>filepath</code>               (<code>Path</code>, default:                   <code>Path('sponsors.json')</code> )           \u2013            <p>File-path to update.</p> </li> <li> <code>exclude_private</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to exclude private members.</p> </li> </ul>"},{"location":"reference/cli/","title":"Insiders CLI","text":""},{"location":"reference/cli/#exec-5--insiders","title":"<code>insiders</code>","text":"<p>Manage your Insiders projects.</p> <p>This tool lets you manage your local and remote Git repositories for projects that offer an Insiders version.</p> <p>See the documentation / help text of the different subcommands available.</p> <p>Example</p> <pre><code>insiders --debug-info\n</code></pre> Global Options Description Default <code>-c</code>, <code>--config</code> <code>CONFIG</code> Path to the configuration file. <code>/home/user/.config/insiders/insiders.toml</code> <code>-L</code>, <code>--log-level</code> <code>LOG_LEVEL</code> Lowest log level to display. Levels below that will be hidden. INFO <code>-P</code>, <code>--log-path</code> <code>LOG_PATH</code> Write log messages to this file path. standard error <code>--log-include</code> <code>LOG_INCLUDE</code> Include logs originating from these modules/loggers. By default, all logs are included. <code>--log-exclude</code> <code>LOG_EXCLUDE</code> Exclude logs originating from these modules/loggers. Applied after inclusion. By default, nothing is excluded. <code>--log-downgrade</code> <code>LOG_DOWNGRADE</code> Downgrade INFO logs to DEBUG for logs originating from these modules/loggers. By default, all dependency logs are downgraded. Options Description Default <code>-V</code>, <code>--version</code> Print the program version and exit. False <code>--debug-info</code> Print debug information. False"},{"location":"reference/cli/command-backlog/","title":"Backlog command","text":""},{"location":"reference/cli/command-backlog/#exec-6--backlog","title":"<code>backlog</code>","text":"<p>List the backlog.</p> <p>List the issues in the backlog.</p> Arguments Description Default <code>BACKLOG_NAMESPACES</code> Namespaces to fetch issues from. <code>BACKLOG_NAMESPACES</code> env-var or <code>backlog.namespaces</code> config-value Options Description Default <code>-i</code>, <code>--issue-labels</code> <code>ISSUE_LABELS</code> Issue labels to keep in issues metadata, and how they are represented. <code>backlog.issue-labels</code> config-value <code>-l</code>, <code>--limit</code> <code>LIMIT</code> Limit the number of issues to display. <code>backlog.limit</code> config-value or <code>0</code> <code>-s</code>, <code>--sort</code> <code>SORT</code> Sort strategy. <code>backlog.sort</code> config-value <code>--public</code> Only use public sponsorships. <code>--plt</code>, <code>--polar-token</code> <code>POLAR_TOKEN</code> A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>. <code>POLAR_TOKEN</code> env-var or <code>backlog.polar-token-command</code> config-value <code>--plb</code>, <code>--polar-beneficiaries</code> <code>POLAR_BENEFICIARIES</code> Beneficiaries of Polar sponsors. <code>sponsors.polar-beneficiaries</code> config-value <code>--ght</code>, <code>--github-token</code> <code>GITHUB_TOKEN</code> A GitHub token. Recommended scopes: <code>read:user</code>. <code>GITHUB_TOKEN</code> env-var or <code>backlog.github-token-command</code> config-value <code>--ghb</code>, <code>--github-beneficiaries</code> <code>GITHUB_BENEFICIARIES</code> Beneficiaries of GitHub sponsors. <code>sponsors.github-beneficiaries</code> config-value"},{"location":"reference/cli/command-index/","title":"Index command","text":""},{"location":"reference/cli/command-index/#exec-7--index","title":"<code>index</code>","text":"<p>Manage the local index.</p>"},{"location":"reference/cli/command-index/#exec-7--list","title":"<code>list</code>","text":"<p>List insiders repositories.</p> <p>List the watched repositories.</p> Options Description Default <code>-s</code>, <code>--sources-directory</code> <code>SOURCES_DIRECTORY</code> Directory where the sources are stored. <code>index.sources-directory</code> config-value or <code>/home/user/.cache/insiders</code> <code>-d</code>, <code>--distributions-directory</code> <code>DISTRIBUTIONS_DIRECTORY</code> Directory where the distributions are stored. <code>index.distributions-directory</code> config-value or <code>/home/user/.local/share/insiders</code> <code>-i</code>, <code>--dists</code> List distributions. True <code>-p</code>, <code>--projects</code> List projects. True"},{"location":"reference/cli/command-index/#exec-7--add","title":"<code>add</code>","text":"<p>Add insiders repositories.</p> <p>Add a repository to the watched repositories.</p> Arguments Description Default <code>REPOSITORIES</code> List of repositories (GitHub namespace/project or Git URL git@host:repo). Options Description Default <code>-s</code>, <code>--sources-directory</code> <code>SOURCES_DIRECTORY</code> Directory where the sources are stored. <code>index.sources-directory</code> config-value or <code>/home/user/.cache/insiders</code> <code>-d</code>, <code>--distributions-directory</code> <code>DISTRIBUTIONS_DIRECTORY</code> Directory where the distributions are stored. <code>index.distributions-directory</code> config-value or <code>/home/user/.local/share/insiders</code> <code>-u</code>, <code>--url</code> <code>URL</code> URL of the index to upload packages to. <code>index.url</code> config-value or <code>http://localhost:31411</code>"},{"location":"reference/cli/command-index/#exec-7--remove","title":"<code>remove</code>","text":"<p>Remove insiders repositories.</p> <p>Remove a repository from the watched repositories.</p> Arguments Description Default <code>REPOSITORIES</code> List of repository names. Options Description Default <code>-s</code>, <code>--sources-directory</code> <code>SOURCES_DIRECTORY</code> Directory where the sources are stored. <code>index.sources-directory</code> config-value or <code>/home/user/.cache/insiders</code> <code>-d</code>, <code>--distributions-directory</code> <code>DISTRIBUTIONS_DIRECTORY</code> Directory where the distributions are stored. <code>index.distributions-directory</code> config-value or <code>/home/user/.local/share/insiders</code>"},{"location":"reference/cli/command-index/#exec-7--update","title":"<code>update</code>","text":"<p>Update insiders packages.</p> <p>Update watched projects.</p> Arguments Description Default <code>REPOSITORIES</code> List of repository names. Options Description Default <code>-s</code>, <code>--sources-directory</code> <code>SOURCES_DIRECTORY</code> Directory where the sources are stored. <code>index.sources-directory</code> config-value or <code>/home/user/.cache/insiders</code> <code>-d</code>, <code>--distributions-directory</code> <code>DISTRIBUTIONS_DIRECTORY</code> Directory where the distributions are stored. <code>index.distributions-directory</code> config-value or <code>/home/user/.local/share/insiders</code> <code>-u</code>, <code>--url</code> <code>URL</code> URL of the index to upload packages to. <code>index.url</code> config-value or <code>http://localhost:31411</code>"},{"location":"reference/cli/command-index/#exec-7--start","title":"<code>start</code>","text":"<p>Start the server.</p> <p>Start the server in the background.</p> Options Description Default <code>-s</code>, <code>--sources-directory</code> <code>SOURCES_DIRECTORY</code> Directory where the sources are stored. <code>index.sources-directory</code> config-value or <code>/home/user/.cache/insiders</code> <code>-d</code>, <code>--distributions-directory</code> <code>DISTRIBUTIONS_DIRECTORY</code> Directory where the distributions are stored. <code>index.distributions-directory</code> config-value or <code>/home/user/.local/share/insiders</code> <code>-u</code>, <code>--url</code> <code>URL</code> URL to serve the index at. <code>index.url</code> config-value or <code>http://localhost:31411</code> <code>-b</code>, <code>--background</code> Run the server in the background. <code>index.start-in-background</code> config-value or False <code>-l</code>, <code>--log-path</code> <code>LOG_PATH</code> Where to write index server logs. <code>index.log-path</code> config-value or standard error"},{"location":"reference/cli/command-index/#exec-7--status","title":"<code>status</code>","text":"<p>Show the server status.</p> <p>Show the server status.</p>"},{"location":"reference/cli/command-index/#exec-7--stop","title":"<code>stop</code>","text":"<p>Stop the server.</p> <p>Stop the server.</p>"},{"location":"reference/cli/command-index/#exec-7--logs","title":"<code>logs</code>","text":"<p>Show the server logs.</p> <p>Show the server logs.</p>"},{"location":"reference/cli/command-project/","title":"Project command","text":""},{"location":"reference/cli/command-project/#exec-8--project","title":"<code>project</code>","text":"<p>Manage projects (GitHub and local copies).</p>"},{"location":"reference/cli/command-project/#exec-8--create","title":"<code>create</code>","text":"<p>Create public/insiders repositories.</p> <p>This command will do several things:</p> <ul> <li>Create public and insiders repositories on GitHub     (using the provided namespace, username, repository name, description, etc.).</li> <li>Clone these two repositories locally (using the provided repository paths).</li> <li>Optionally initialize the public repository by generating initial contents     using the specified Copier template and answers.</li> <li>Optionally run a post creation command into the public repository.</li> <li>Pull the public contents into the insiders clone (by declaring an <code>upstream</code> remote).</li> </ul> <p>Example 1 - Project in user's namespace</p> <p>The insiders namespace, insiders repository name and username are inferred from the namespace and repository name.</p> <pre><code>insiders create \\\n    -n user \\\n    -r mkdocs-ultimate \\\n    -d \"The ultimate plugin for MkDocs (??)\" \\\n    -o ~/data/dev \\\n    -O ~/data/dev/insiders \\\n    -t gh:user/copier-uv\n</code></pre> <p>Example 2 - Project in another namespace:</p> <p>The insiders namespace, insiders repository name and username are different, so must be provided explicitly:</p> <pre><code>insiders create \\\n    -n mkdocstrings \\\n    -r rust \\\n    -d \"A Rust handler for mkdocstrings\" \\\n    -o ~/data/dev \\\n    -O ~/data/dev/insiders \\\n    -N user-insiders \\\n    -R mkdocstrings-rust \\\n    -u user \\\n    -t gh:mkdocstrings/handler-template\n</code></pre> Options Description Default <code>-r</code>, <code>--repository</code> <code>REPOSITORY</code> Name of the public repository. <code>-d</code>, <code>--description</code> <code>DESCRIPTION</code> Shared description. <code>-n</code>, <code>--namespace</code> <code>NAMESPACE</code> Namespace of the public repository. <code>project.namespace</code> config-value <code>-o</code>, <code>--project-directory</code> <code>PROJECT_DIRECTORY</code> Directory in which to clone the public repository. <code>project.directory</code> config-value <code>-R</code>, <code>--insiders-repository</code> <code>INSIDERS_REPOSITORY</code> Name of the insiders repository. public name <code>-N</code>, <code>--insiders-namespace</code> <code>INSIDERS_NAMESPACE</code> Namespace of the insiders repository. <code>project.insiders-namespace</code> config-value or public namespace <code>-O</code>, <code>--insiders-project-directory</code> <code>INSIDERS_PROJECT_DIRECTORY</code> Directory in which to clone the insiders repository. <code>project.insiders-directory</code> config-value <code>-u</code>, <code>--github-username</code> <code>GITHUB_USERNAME</code> GitHub username. <code>project.github-username</code> config-value or public namespace <code>-t</code>, <code>--copier-template</code> <code>COPIER_TEMPLATE</code> Copier template to generate new projects with. <code>project.copier-template</code> config-value <code>-a</code>, <code>--copier-template-answers</code> <code>COPIER_TEMPLATE_ANSWERS</code> Copier template answers to use when generating a project. <code>project.copier-template-answers</code> config-value <code>-x</code>, <code>--post-creation-command</code> <code>POST_CREATION_COMMAND</code> Command to run after creating the public repository. <code>project.post-creation-command</code> config-value <code>-i</code>, <code>--register-on-pypi</code> Whether to register the project on PyPI after creating it. <code>project.register-on-pypi</code> config-value <code>-y</code>, <code>--pypi-username</code> <code>PYPI_USERNAME</code> PyPI username to register the project with. <code>project.pypi-username</code> config-value"},{"location":"reference/cli/command-project/#exec-8--check","title":"<code>check</code>","text":"<p>Check public/insiders repositories.</p> <p>TODO. Check that everything is consistent.</p>"},{"location":"reference/cli/command-project/#exec-8--register-pypi","title":"<code>register-pypi</code>","text":"<p>Register a name on PyPI.</p> <p>This will create a temporary project on your filesystem, then build both source and wheel distributions for it, and upload them to PyPI using Twine.</p> <p>After that, you will see an initial version 0.0.0 of your project on PyPI.</p> <p>Example</p> <pre><code>insiders pypi register -u user -n my-new-project -d \"My new project!\"\n</code></pre> <p>Credentials must be configured in <code>~/.pypirc</code> to allow Twine to push to PyPI. For example, if you use PyPI API tokens, add the token to your keyring:</p> <pre><code>pipx install keyring\nkeyring set https://upload.pypi.org/legacy/ __token__\n# __token__ is a literal string, do not replace it with your token.\n# The command will prompt you to paste your token.\n</code></pre> <p>And configure <code>~/.pypirc</code>:</p> <pre><code>[distutils]\nindex-servers =\n    pypi\n\n[pypi]\nusername: __token__\n</code></pre> Options Description Default <code>-u</code>, <code>--username</code> <code>USERNAME</code> Username on PyPI (your account). <code>project.pypi-username</code> config-value <code>-n</code>, <code>--name</code> <code>NAME</code> Name to register. <code>-d</code>, <code>--description</code> <code>DESCRIPTION</code> Description of the project on PyPI."},{"location":"reference/cli/command-sponsors/","title":"Sponsors command","text":""},{"location":"reference/cli/command-sponsors/#exec-9--sponsors","title":"<code>sponsors</code>","text":"<p>Manage sponsors.</p>"},{"location":"reference/cli/command-sponsors/#exec-9--list","title":"<code>list</code>","text":"<p>List sponsors.</p> <p>List sponsors and non-sponsors benefitting from sponsorships.</p> Options Description Default <code>--ghsa</code>, <code>--github-sponsored-account</code> <code>GITHUB_SPONSORED_ACCOUNT</code> The sponsored account on GitHub Sponsors. <code>sponsors.github-sponsored-account</code> config-value or none <code>--ghiu</code>, <code>--github-include-users</code> <code>INCLUDE_USERS</code> Users that should always be in the team. <code>sponsors.include-users</code> config-value <code>--gheu</code>, <code>--github-exclude-users</code> <code>EXCLUDE_USERS</code> Users that should never be in the team. <code>sponsors.exclude-users</code> config-value <code>--ghb</code>, <code>--github-beneficiaries</code> <code>GITHUB_BENEFICIARIES</code> Beneficiaries of GitHub sponsors. <code>sponsors.github-beneficiaries</code> config-value <code>--ght</code>, <code>--github-token</code> <code>GITHUB_TOKEN</code> A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>. <code>GITHUB_TOKEN</code> env-var or <code>sponsors.github-token-command</code> config-value <code>--plsa</code>, <code>--polar-sponsored-account</code> <code>POLAR_SPONSORED_ACCOUNT</code> The sponsored account on Polar. <code>sponsors.polar-sponsored-account</code> config-value or none <code>--plb</code>, <code>--polar-beneficiaries</code> <code>POLAR_BENEFICIARIES</code> Beneficiaries of Polar sponsors. <code>sponsors.polar-beneficiaries</code> config-value <code>--plt</code>, <code>--polar-token</code> <code>POLAR_TOKEN</code> A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>. <code>POLAR_TOKEN</code> env-var or <code>sponsors.polar-token-command</code> config-value <code>-m</code>, <code>--minimum-amount</code> <code>MINIMUM_AMOUNT</code> Minimum amount to be considered an insider. <code>sponsors.minimum-amount</code> config-value or <code>0</code> <code>--public</code> Only use public sponsorships. <code>-S</code>, <code>--sponsorships</code> List sponsorships rather than users/sponsors."},{"location":"reference/cli/command-sponsors/#exec-9--show","title":"<code>show</code>","text":"<p>Show details about a sponsor/user.</p> <p>TODO. Show details about a sponsor/user.</p> Arguments Description Default <code>INSIDERS_TEAM</code> The GitHub team to sync. <code>sponsors.insiders-team</code> config-value Options Description Default <code>--ghsa</code>, <code>--github-sponsored-account</code> <code>GITHUB_SPONSORED_ACCOUNT</code> The sponsored account on GitHub Sponsors. <code>sponsors.github-sponsored-account</code> config-value or none <code>--iu</code>, <code>--include-users</code> <code>INCLUDE_USERS</code> Users that should always be in the team. <code>sponsors.include-users</code> config-value <code>--eu</code>, <code>--exclude-users</code> <code>EXCLUDE_USERS</code> Users that should never be in the team. <code>sponsors.exclude-users</code> config-value <code>--ghb</code>, <code>--github-beneficiaries</code> <code>GITHUB_BENEFICIARIES</code> A mapping of users belonging to sponsoring organizations. <code>sponsors.github-beneficiaries</code> config-value <code>--ght</code>, <code>--github-token</code> <code>GITHUB_TOKEN</code> A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>. <code>GITHUB_TOKEN</code> env-var or <code>sponsors.github-token-command</code> config-value <code>--plsa</code>, <code>--polar-sponsored-account</code> <code>POLAR_SPONSORED_ACCOUNT</code> The sponsored account on Polar. <code>sponsors.polar-sponsored-account</code> config-value or none <code>--plt</code>, <code>--polar-token</code> <code>POLAR_TOKEN</code> A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>. <code>POLAR_TOKEN</code> env-var or <code>sponsors.polar-token-command</code> config-value <code>-m</code>, <code>--minimum-amount</code> <code>MINIMUM_AMOUNT</code> Minimum amount to be considered an insider. <code>sponsors.minimum-amount</code> config-value or <code>0</code> <code>--dry-run</code> Display the changes that would be made, without making them. False"},{"location":"reference/cli/command-sponsors/#exec-9--team-list","title":"<code>team-list</code>","text":"<p>List members of a team.</p> <p>List the members of a GitHub team.</p>"},{"location":"reference/cli/command-sponsors/#exec-9--team-sync","title":"<code>team-sync</code>","text":"<p>Synchronize members of a team with current sponsors.</p> <p>Fetch current sponsors from GitHub, then grant or revoke access to a GitHub team for eligible sponsors.</p> Arguments Description Default <code>INSIDERS_TEAM</code> The GitHub team to sync. <code>sponsors.insiders-team</code> config-value Options Description Default <code>--ghsa</code>, <code>--github-sponsored-account</code> <code>GITHUB_SPONSORED_ACCOUNT</code> The sponsored account on GitHub Sponsors. <code>sponsors.github-sponsored-account</code> config-value or none <code>--iu</code>, <code>--include-users</code> <code>INCLUDE_USERS</code> Users that should always be in the team. <code>sponsors.include-users</code> config-value <code>--eu</code>, <code>--exclude-users</code> <code>EXCLUDE_USERS</code> Users that should never be in the team. <code>sponsors.exclude-users</code> config-value <code>--ghb</code>, <code>--github-beneficiaries</code> <code>GITHUB_BENEFICIARIES</code> A mapping of users belonging to sponsoring organizations. <code>sponsors.github-beneficiaries</code> config-value <code>--ght</code>, <code>--github-token</code> <code>GITHUB_TOKEN</code> A GitHub token. Recommended scopes: <code>admin:org</code> and <code>read:user</code>. <code>GITHUB_TOKEN</code> env-var or <code>sponsors.github-token-command</code> config-value <code>--plsa</code>, <code>--polar-sponsored-account</code> <code>POLAR_SPONSORED_ACCOUNT</code> The sponsored account on Polar. <code>sponsors.polar-sponsored-account</code> config-value or none <code>--plb</code>, <code>--polar-beneficiaries</code> <code>POLAR_BENEFICIARIES</code> Beneficiaries of Polar sponsors. <code>sponsors.polar-beneficiaries</code> config-value <code>--plt</code>, <code>--polar-token</code> <code>POLAR_TOKEN</code> A Polar token. Recommended scopes: <code>user:read</code>, <code>issues:read</code>, <code>subscriptions:read</code>. <code>POLAR_TOKEN</code> env-var or <code>sponsors.polar-token-command</code> config-value <code>-m</code>, <code>--minimum-amount</code> <code>MINIMUM_AMOUNT</code> Minimum amount to be considered an insider. <code>sponsors.minimum-amount</code> config-value or <code>0</code> <code>--dry-run</code> Display the changes that would be made, without making them. False"},{"location":"coverage/","title":"Coverage report","text":""}]}